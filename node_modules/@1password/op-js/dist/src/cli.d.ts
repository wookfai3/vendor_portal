import { FieldAssignment, FieldLabelSelector, FieldTypeSelector, GlobalFlags } from ".";
export type FlagValue = string | string[] | boolean | FieldLabelSelector | FieldTypeSelector;
export type Flags = Record<string, FlagValue>;
type Arg = string | FieldAssignment;
export interface ClientInfo {
    name: string;
    id: string;
    build: string;
}
export type ValidationErrorType = "not-found" | "version";
export declare class ValidationError extends Error {
    type: ValidationErrorType;
    requiredVersion?: string;
    currentVersion?: string;
    constructor(type: ValidationErrorType, requiredVersion?: string, currentVersion?: string);
}
export declare class ExecutionError extends Error {
    status: number;
    constructor(message: string, status: number);
}
export declare class CLIError extends ExecutionError {
    originalMessage: string;
    private static errorRegex;
    timestamp?: Date;
    constructor(originalMessage: string, status: number);
}
export declare const semverToInt: (input: string) => string;
export declare const camelToHyphen: (str: string) => string;
export declare const sanitizeInput: (str: string) => string;
export declare const parseFlagValue: (value: FlagValue) => string;
export declare const createFlags: (flags: Flags) => string[];
export declare const createFieldAssignment: ([label, type, value,]: FieldAssignment) => string;
export declare const defaultClientInfo: ClientInfo;
export declare class CLI {
    static recommendedVersion: string;
    clientInfo: ClientInfo;
    globalFlags: Partial<GlobalFlags>;
    connect?: {
        host: string;
        token: string;
    };
    serviceAccountToken: string;
    setClientInfo(clientInfo: ClientInfo): void;
    getVersion(): string;
    validate(requiredVersion?: string): Promise<void>;
    private createParts;
    execute<TData extends string | Record<string, any> | void>(subCommand: string[], { args, flags, stdin, json, }?: {
        args?: Arg[];
        flags?: Flags;
        stdin?: string | Record<string, any>;
        json?: boolean;
    }): TData;
}
export declare const cli: CLI;
export {};
