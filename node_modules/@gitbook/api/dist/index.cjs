"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// ../../node_modules/event-iterator/lib/event-iterator.js
var require_event_iterator = __commonJS({
  "../../node_modules/event-iterator/lib/event-iterator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var EventQueue = class {
      constructor() {
        this.pullQueue = [];
        this.pushQueue = [];
        this.eventHandlers = {};
        this.isPaused = false;
        this.isStopped = false;
      }
      push(value) {
        if (this.isStopped)
          return;
        const resolution = { value, done: false };
        if (this.pullQueue.length) {
          const placeholder = this.pullQueue.shift();
          if (placeholder)
            placeholder.resolve(resolution);
        } else {
          this.pushQueue.push(Promise.resolve(resolution));
          if (this.highWaterMark !== void 0 && this.pushQueue.length >= this.highWaterMark && !this.isPaused) {
            this.isPaused = true;
            if (this.eventHandlers.highWater) {
              this.eventHandlers.highWater();
            } else if (console) {
              console.warn(`EventIterator queue reached ${this.pushQueue.length} items`);
            }
          }
        }
      }
      stop() {
        if (this.isStopped)
          return;
        this.isStopped = true;
        this.remove();
        for (const placeholder of this.pullQueue) {
          placeholder.resolve({ value: void 0, done: true });
        }
        this.pullQueue.length = 0;
      }
      fail(error) {
        if (this.isStopped)
          return;
        this.isStopped = true;
        this.remove();
        if (this.pullQueue.length) {
          for (const placeholder of this.pullQueue) {
            placeholder.reject(error);
          }
          this.pullQueue.length = 0;
        } else {
          const rejection = Promise.reject(error);
          rejection.catch(() => {
          });
          this.pushQueue.push(rejection);
        }
      }
      remove() {
        Promise.resolve().then(() => {
          if (this.removeCallback)
            this.removeCallback();
        });
      }
      [Symbol.asyncIterator]() {
        return {
          next: (value) => {
            const result = this.pushQueue.shift();
            if (result) {
              if (this.lowWaterMark !== void 0 && this.pushQueue.length <= this.lowWaterMark && this.isPaused) {
                this.isPaused = false;
                if (this.eventHandlers.lowWater) {
                  this.eventHandlers.lowWater();
                }
              }
              return result;
            } else if (this.isStopped) {
              return Promise.resolve({ value: void 0, done: true });
            } else {
              return new Promise((resolve, reject) => {
                this.pullQueue.push({ resolve, reject });
              });
            }
          },
          return: () => {
            this.isStopped = true;
            this.pushQueue.length = 0;
            this.remove();
            return Promise.resolve({ value: void 0, done: true });
          }
        };
      }
    };
    var EventIterator2 = class {
      constructor(listen, { highWaterMark = 100, lowWaterMark = 1 } = {}) {
        const queue = new EventQueue();
        queue.highWaterMark = highWaterMark;
        queue.lowWaterMark = lowWaterMark;
        queue.removeCallback = listen({
          push: (value) => queue.push(value),
          stop: () => queue.stop(),
          fail: (error) => queue.fail(error),
          on: (event, fn) => {
            queue.eventHandlers[event] = fn;
          }
        }) || (() => {
        });
        this[Symbol.asyncIterator] = () => queue[Symbol.asyncIterator]();
        Object.freeze(this);
      }
    };
    exports.EventIterator = EventIterator2;
    exports.default = EventIterator2;
  }
});

// ../../node_modules/event-iterator/lib/node.js
var require_node = __commonJS({
  "../../node_modules/event-iterator/lib/node.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var event_iterator_1 = require_event_iterator();
    exports.EventIterator = event_iterator_1.EventIterator;
    function stream(evOptions) {
      return new event_iterator_1.EventIterator((queue) => {
        this.addListener("data", queue.push);
        this.addListener("end", queue.stop);
        this.addListener("error", queue.fail);
        queue.on("highWater", () => this.pause());
        queue.on("lowWater", () => this.resume());
        return () => {
          this.removeListener("data", queue.push);
          this.removeListener("end", queue.stop);
          this.removeListener("error", queue.fail);
          if (this.destroy) {
            this.destroy();
          } else if (typeof this.close == "function") {
            ;
            this.close();
          }
        };
      }, evOptions);
    }
    exports.stream = stream;
    exports.default = event_iterator_1.EventIterator;
  }
});

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AIMessageRole: () => AIMessageRole,
  AIModel: () => AIModel,
  APIIntegrationScope: () => APIIntegrationScope,
  AgentStatus: () => AgentStatus,
  AgentTaskStatus: () => AgentTaskStatus,
  Api: () => Api,
  BillingInterval: () => BillingInterval,
  BillingProduct: () => BillingProduct,
  BillingSwitchAction: () => BillingSwitchAction,
  BillingTrialStatus: () => BillingTrialStatus,
  ChangeRequestReviewStatus: () => ChangeRequestReviewStatus,
  ChangeRequestStatus: () => ChangeRequestStatus,
  CloudflareHostnameStatus: () => CloudflareHostnameStatus,
  CloudflareHostnameTLSStatus: () => CloudflareHostnameTLSStatus,
  CloudflareHostnameTLSValidationMethod: () => CloudflareHostnameTLSValidationMethod,
  ContentKitIcon: () => ContentKitIcon,
  ContentReferenceRelation: () => ContentReferenceRelation,
  ContentReferenceStatus: () => ContentReferenceStatus,
  ContentType: () => ContentType,
  ContentVisibility: () => ContentVisibility,
  CustomHostnameDnsStatus: () => CustomHostnameDnsStatus,
  CustomHostnameErrorStatus: () => CustomHostnameErrorStatus,
  CustomHostnameSslStatus: () => CustomHostnameSslStatus,
  CustomizationBackground: () => CustomizationBackground,
  CustomizationCorners: () => CustomizationCorners,
  CustomizationDefaultFont: () => CustomizationDefaultFont,
  CustomizationDepth: () => CustomizationDepth,
  CustomizationHeaderPreset: () => CustomizationHeaderPreset,
  CustomizationIconsStyle: () => CustomizationIconsStyle,
  CustomizationLinksStyle: () => CustomizationLinksStyle,
  CustomizationLocale: () => CustomizationLocale,
  CustomizationSearchStyle: () => CustomizationSearchStyle,
  CustomizationSidebarBackgroundStyle: () => CustomizationSidebarBackgroundStyle,
  CustomizationSidebarListStyle: () => CustomizationSidebarListStyle,
  CustomizationTheme: () => CustomizationTheme,
  CustomizationThemeMode: () => CustomizationThemeMode,
  GITBOOK_DEFAULT_ENDPOINT: () => GITBOOK_DEFAULT_ENDPOINT,
  GitBookAPI: () => GitBookAPI,
  GitBookAPIError: () => GitBookAPIError,
  GitBookUsers: () => GitBookUsers,
  GitSyncOperationDirection: () => GitSyncOperationDirection,
  GitSyncOperationStage: () => GitSyncOperationStage,
  GitSyncOperationState: () => GitSyncOperationState,
  GitSyncProvider: () => GitSyncProvider,
  HttpClient: () => HttpClient,
  ImportContentSource: () => ImportContentSource,
  IntegrationCategory: () => IntegrationCategory,
  IntegrationInstallationSiteSelection: () => IntegrationInstallationSiteSelection,
  IntegrationInstallationSpaceSelection: () => IntegrationInstallationSpaceSelection,
  IntegrationInstallationStatus: () => IntegrationInstallationStatus,
  IntegrationScope: () => IntegrationScope,
  IntegrationTarget: () => IntegrationTarget,
  IntegrationVisibility: () => IntegrationVisibility,
  MemberRole: () => MemberRole,
  OpenAPISpecProcessingErrorCode: () => OpenAPISpecProcessingErrorCode,
  OpenAPISpecProcessingState: () => OpenAPISpecProcessingState,
  OrganizationBlockReason: () => OrganizationBlockReason,
  OrganizationCommunityType: () => OrganizationCommunityType,
  OrganizationType: () => OrganizationType,
  OrganizationUseCase: () => OrganizationUseCase,
  PageFeedbackRating: () => PageFeedbackRating,
  RevisionPageLayoutOptionsCoverSize: () => RevisionPageLayoutOptionsCoverSize,
  RevisionPageLayoutPreset: () => RevisionPageLayoutPreset,
  RevisionPageType: () => RevisionPageType,
  RevisionSemanticChangeType: () => RevisionSemanticChangeType,
  SAMLProviderStatus: () => SAMLProviderStatus,
  SiteAdsStatus: () => SiteAdsStatus,
  SiteAdsTopic: () => SiteAdsTopic,
  SiteAgentsContext: () => SiteAgentsContext,
  SiteCustomizationFeature: () => SiteCustomizationFeature,
  SiteExternalLinksTarget: () => SiteExternalLinksTarget,
  SiteFeatureKey: () => SiteFeatureKey,
  SiteInsightsAdPlacement: () => SiteInsightsAdPlacement,
  SiteInsightsEventType: () => SiteInsightsEventType,
  SiteInsightsLinkPosition: () => SiteInsightsLinkPosition,
  SiteInsightsQueryOperator: () => SiteInsightsQueryOperator,
  SiteInsightsQueryRange: () => SiteInsightsQueryRange,
  SiteInsightsTrademarkPlacement: () => SiteInsightsTrademarkPlacement,
  SiteInsightsVisitorBot: () => SiteInsightsVisitorBot,
  SiteInsightsVisitorBrowser: () => SiteInsightsVisitorBrowser,
  SiteInsightsVisitorDevice: () => SiteInsightsVisitorDevice,
  SiteInsightsVisitorOS: () => SiteInsightsVisitorOS,
  SiteType: () => SiteType,
  SiteVisibility: () => SiteVisibility,
  SpaceEditMode: () => SpaceEditMode,
  StorageUploadKind: () => StorageUploadKind,
  TeamMemberRole: () => TeamMemberRole,
  TextAlignment: () => TextAlignment,
  TranslationLanguage: () => TranslationLanguage
});
module.exports = __toCommonJS(src_exports);

// package.json
var name = "@gitbook/api";
var version = "0.124.0";

// src/client.ts
var import_event_iterator = __toESM(require_node(), 1);

// ../../node_modules/eventsource-parser/dist/index.js
var __defProp2 = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key != "symbol" ? key + "" : key, value);
var ParseError = class extends Error {
  constructor(message, options) {
    super(message), __publicField(this, "type"), __publicField(this, "field"), __publicField(this, "value"), __publicField(this, "line"), this.name = "ParseError", this.type = options.type, this.field = options.field, this.value = options.value, this.line = options.line;
  }
};
function noop(_arg) {
}
function createParser(callbacks) {
  const { onEvent = noop, onError = noop, onRetry = noop, onComment } = callbacks;
  let incompleteLine = "", isFirstChunk = true, id, data = "", eventType = "";
  function feed(newChunk) {
    const chunk = isFirstChunk ? newChunk.replace(/^\xEF\xBB\xBF/, "") : newChunk, [complete, incomplete] = splitLines(`${incompleteLine}${chunk}`);
    for (const line of complete)
      parseLine(line);
    incompleteLine = incomplete, isFirstChunk = false;
  }
  function parseLine(line) {
    if (line === "") {
      dispatchEvent();
      return;
    }
    if (line.startsWith(":")) {
      onComment && onComment(line.slice(line.startsWith(": ") ? 2 : 1));
      return;
    }
    const fieldSeparatorIndex = line.indexOf(":");
    if (fieldSeparatorIndex !== -1) {
      const field = line.slice(0, fieldSeparatorIndex), offset = line[fieldSeparatorIndex + 1] === " " ? 2 : 1, value = line.slice(fieldSeparatorIndex + offset);
      processField(field, value, line);
      return;
    }
    processField(line, "", line);
  }
  function processField(field, value, line) {
    switch (field) {
      case "event":
        eventType = value;
        break;
      case "data":
        data = `${data}${value}
`;
        break;
      case "id":
        id = value.includes("\0") ? void 0 : value;
        break;
      case "retry":
        /^\d+$/.test(value) ? onRetry(parseInt(value, 10)) : onError(
          new ParseError(`Invalid \`retry\` value: "${value}"`, {
            type: "invalid-retry",
            value,
            line
          })
        );
        break;
      default:
        onError(
          new ParseError(
            `Unknown field "${field.length > 20 ? `${field.slice(0, 20)}\u2026` : field}"`,
            { type: "unknown-field", field, value, line }
          )
        );
        break;
    }
  }
  function dispatchEvent() {
    data.length > 0 && onEvent({
      id,
      event: eventType || void 0,
      data: data.endsWith(`
`) ? data.slice(0, -1) : data
    }), id = void 0, data = "", eventType = "";
  }
  function reset(options = {}) {
    incompleteLine && options.consume && parseLine(incompleteLine), id = void 0, data = "", eventType = "", incompleteLine = "";
  }
  return { feed, reset };
}
function splitLines(chunk) {
  const lines = [];
  let incompleteLine = "";
  const totalLength = chunk.length;
  for (let i = 0; i < totalLength; i++) {
    const char = chunk[i];
    char === "\r" && chunk[i + 1] === `
` ? (lines.push(incompleteLine), incompleteLine = "", i++) : char === "\r" || char === `
` ? (lines.push(incompleteLine), incompleteLine = "") : incompleteLine += char;
  }
  return [lines, incompleteLine];
}

// src/client.ts
var ContentVisibility = /* @__PURE__ */ ((ContentVisibility2) => {
  ContentVisibility2["Public"] = "public";
  ContentVisibility2["Unlisted"] = "unlisted";
  ContentVisibility2["ShareLink"] = "share-link";
  ContentVisibility2["VisitorAuth"] = "visitor-auth";
  ContentVisibility2["InCollection"] = "in-collection";
  ContentVisibility2["Private"] = "private";
  return ContentVisibility2;
})(ContentVisibility || {});
var SpaceEditMode = /* @__PURE__ */ ((SpaceEditMode2) => {
  SpaceEditMode2["Live"] = "live";
  SpaceEditMode2["Locked"] = "locked";
  return SpaceEditMode2;
})(SpaceEditMode || {});
var GitSyncProvider = /* @__PURE__ */ ((GitSyncProvider2) => {
  GitSyncProvider2["Github"] = "github";
  GitSyncProvider2["Gitlab"] = "gitlab";
  GitSyncProvider2["GithubLegacy"] = "github-legacy";
  return GitSyncProvider2;
})(GitSyncProvider || {});
var MemberRole = /* @__PURE__ */ ((MemberRole2) => {
  MemberRole2["Admin"] = "admin";
  MemberRole2["Create"] = "create";
  MemberRole2["Edit"] = "edit";
  MemberRole2["Review"] = "review";
  MemberRole2["Comment"] = "comment";
  MemberRole2["Read"] = "read";
  return MemberRole2;
})(MemberRole || {});
var TextAlignment = /* @__PURE__ */ ((TextAlignment2) => {
  TextAlignment2["Start"] = "start";
  TextAlignment2["Center"] = "center";
  TextAlignment2["End"] = "end";
  return TextAlignment2;
})(TextAlignment || {});
var TranslationLanguage = /* @__PURE__ */ ((TranslationLanguage2) => {
  TranslationLanguage2["En"] = "en";
  TranslationLanguage2["Fr"] = "fr";
  TranslationLanguage2["De"] = "de";
  TranslationLanguage2["Es"] = "es";
  TranslationLanguage2["It"] = "it";
  TranslationLanguage2["Pt"] = "pt";
  TranslationLanguage2["Ru"] = "ru";
  TranslationLanguage2["Ja"] = "ja";
  TranslationLanguage2["Zh"] = "zh";
  TranslationLanguage2["Ko"] = "ko";
  TranslationLanguage2["Ar"] = "ar";
  TranslationLanguage2["Hi"] = "hi";
  TranslationLanguage2["Nl"] = "nl";
  TranslationLanguage2["Pl"] = "pl";
  TranslationLanguage2["Tr"] = "tr";
  TranslationLanguage2["Sv"] = "sv";
  TranslationLanguage2["No"] = "no";
  TranslationLanguage2["Da"] = "da";
  TranslationLanguage2["Fi"] = "fi";
  TranslationLanguage2["El"] = "el";
  TranslationLanguage2["Cs"] = "cs";
  TranslationLanguage2["Hu"] = "hu";
  TranslationLanguage2["Ro"] = "ro";
  TranslationLanguage2["Th"] = "th";
  TranslationLanguage2["Vi"] = "vi";
  TranslationLanguage2["Id"] = "id";
  TranslationLanguage2["Ms"] = "ms";
  TranslationLanguage2["He"] = "he";
  TranslationLanguage2["Uk"] = "uk";
  TranslationLanguage2["Sk"] = "sk";
  TranslationLanguage2["Bg"] = "bg";
  TranslationLanguage2["Hr"] = "hr";
  TranslationLanguage2["Lt"] = "lt";
  TranslationLanguage2["Lv"] = "lv";
  TranslationLanguage2["Et"] = "et";
  TranslationLanguage2["Sl"] = "sl";
  return TranslationLanguage2;
})(TranslationLanguage || {});
var RevisionPageLayoutOptionsCoverSize = /* @__PURE__ */ ((RevisionPageLayoutOptionsCoverSize2) => {
  RevisionPageLayoutOptionsCoverSize2["Hero"] = "hero";
  RevisionPageLayoutOptionsCoverSize2["Full"] = "full";
  return RevisionPageLayoutOptionsCoverSize2;
})(RevisionPageLayoutOptionsCoverSize || {});
var ChangeRequestStatus = /* @__PURE__ */ ((ChangeRequestStatus2) => {
  ChangeRequestStatus2["Draft"] = "draft";
  ChangeRequestStatus2["Open"] = "open";
  ChangeRequestStatus2["Archived"] = "archived";
  ChangeRequestStatus2["Merged"] = "merged";
  return ChangeRequestStatus2;
})(ChangeRequestStatus || {});
var ImportContentSource = /* @__PURE__ */ ((ImportContentSource2) => {
  ImportContentSource2["Website"] = "website";
  ImportContentSource2["Docx"] = "docx";
  ImportContentSource2["Markdown"] = "markdown";
  ImportContentSource2["Html"] = "html";
  ImportContentSource2["Zip"] = "zip";
  ImportContentSource2["Confluence"] = "confluence";
  ImportContentSource2["GithubWiki"] = "github-wiki";
  ImportContentSource2["DropboxPaper"] = "dropbox-paper";
  ImportContentSource2["Notion"] = "notion";
  ImportContentSource2["Quip"] = "quip";
  ImportContentSource2["GoogleDocs"] = "google-docs";
  return ImportContentSource2;
})(ImportContentSource || {});
var OrganizationType = /* @__PURE__ */ ((OrganizationType2) => {
  OrganizationType2["Business"] = "business";
  OrganizationType2["Community"] = "community";
  return OrganizationType2;
})(OrganizationType || {});
var OrganizationUseCase = /* @__PURE__ */ ((OrganizationUseCase2) => {
  OrganizationUseCase2["InternalDocs"] = "internalDocs";
  OrganizationUseCase2["DocsSite"] = "docsSite";
  OrganizationUseCase2["AudienceControlledSite"] = "audienceControlledSite";
  OrganizationUseCase2["ProductDocs"] = "productDocs";
  OrganizationUseCase2["TeamKnowledgeBase"] = "teamKnowledgeBase";
  OrganizationUseCase2["DesignSystem"] = "designSystem";
  OrganizationUseCase2["OpenSourceDocs"] = "openSourceDocs";
  OrganizationUseCase2["Notes"] = "notes";
  OrganizationUseCase2["Other"] = "other";
  return OrganizationUseCase2;
})(OrganizationUseCase || {});
var OrganizationCommunityType = /* @__PURE__ */ ((OrganizationCommunityType2) => {
  OrganizationCommunityType2["NonProfit"] = "nonProfit";
  OrganizationCommunityType2["OpenSource"] = "openSource";
  OrganizationCommunityType2["Education"] = "education";
  return OrganizationCommunityType2;
})(OrganizationCommunityType || {});
var BillingProduct = /* @__PURE__ */ ((BillingProduct2) => {
  BillingProduct2["Free2024"] = "free_2024";
  BillingProduct2["Plus2024"] = "plus_2024";
  BillingProduct2["Pro2024"] = "pro_2024";
  BillingProduct2["Enterprise2024"] = "enterprise_2024";
  BillingProduct2["Community2024"] = "community_2024";
  BillingProduct2["Free"] = "free";
  BillingProduct2["Plus"] = "plus";
  BillingProduct2["Pro"] = "pro";
  BillingProduct2["Team"] = "team";
  BillingProduct2["Business"] = "business";
  BillingProduct2["Legacy"] = "legacy";
  BillingProduct2["Startup"] = "startup";
  BillingProduct2["Enterprise"] = "enterprise";
  BillingProduct2["Community"] = "community";
  BillingProduct2["TeamOct2019Free"] = "team_oct_2019_free";
  BillingProduct2["TeamDec2021"] = "team_dec_2021";
  BillingProduct2["BusinessDec2021"] = "business_dec_2021";
  return BillingProduct2;
})(BillingProduct || {});
var BillingInterval = /* @__PURE__ */ ((BillingInterval2) => {
  BillingInterval2["Monthly"] = "monthly";
  BillingInterval2["Yearly"] = "yearly";
  return BillingInterval2;
})(BillingInterval || {});
var BillingTrialStatus = /* @__PURE__ */ ((BillingTrialStatus2) => {
  BillingTrialStatus2["Notapplicable"] = "notapplicable";
  BillingTrialStatus2["None"] = "none";
  BillingTrialStatus2["Active"] = "active";
  BillingTrialStatus2["Ended"] = "ended";
  BillingTrialStatus2["Expired"] = "expired";
  return BillingTrialStatus2;
})(BillingTrialStatus || {});
var OrganizationBlockReason = /* @__PURE__ */ ((OrganizationBlockReason2) => {
  OrganizationBlockReason2["Security"] = "security";
  return OrganizationBlockReason2;
})(OrganizationBlockReason || {});
var OpenAPISpecProcessingState = /* @__PURE__ */ ((OpenAPISpecProcessingState2) => {
  OpenAPISpecProcessingState2["Pending"] = "pending";
  OpenAPISpecProcessingState2["Progress"] = "progress";
  OpenAPISpecProcessingState2["Complete"] = "complete";
  return OpenAPISpecProcessingState2;
})(OpenAPISpecProcessingState || {});
var OpenAPISpecProcessingErrorCode = /* @__PURE__ */ ((OpenAPISpecProcessingErrorCode2) => {
  OpenAPISpecProcessingErrorCode2["FETCH_TIMEOUT"] = "FETCH_TIMEOUT";
  OpenAPISpecProcessingErrorCode2["FETCH_ERROR"] = "FETCH_ERROR";
  OpenAPISpecProcessingErrorCode2["PARSE_ERROR"] = "PARSE_ERROR";
  return OpenAPISpecProcessingErrorCode2;
})(OpenAPISpecProcessingErrorCode || {});
var ContentReferenceStatus = /* @__PURE__ */ ((ContentReferenceStatus2) => {
  ContentReferenceStatus2["Ok"] = "ok";
  ContentReferenceStatus2["Broken"] = "broken";
  ContentReferenceStatus2["InApp"] = "in-app";
  return ContentReferenceStatus2;
})(ContentReferenceStatus || {});
var ContentReferenceRelation = /* @__PURE__ */ ((ContentReferenceRelation2) => {
  ContentReferenceRelation2["Reference"] = "reference";
  ContentReferenceRelation2["DependsOn"] = "dependsOn";
  return ContentReferenceRelation2;
})(ContentReferenceRelation || {});
var ChangeRequestReviewStatus = /* @__PURE__ */ ((ChangeRequestReviewStatus2) => {
  ChangeRequestReviewStatus2["ChangesRequested"] = "changes-requested";
  ChangeRequestReviewStatus2["Approved"] = "approved";
  return ChangeRequestReviewStatus2;
})(ChangeRequestReviewStatus || {});
var RevisionPageType = /* @__PURE__ */ ((RevisionPageType2) => {
  RevisionPageType2["Document"] = "document";
  RevisionPageType2["Group"] = "group";
  RevisionPageType2["Link"] = "link";
  RevisionPageType2["Computed"] = "computed";
  return RevisionPageType2;
})(RevisionPageType || {});
var RevisionPageLayoutPreset = /* @__PURE__ */ ((RevisionPageLayoutPreset2) => {
  RevisionPageLayoutPreset2["Docs"] = "docs";
  RevisionPageLayoutPreset2["Editorial"] = "editorial";
  RevisionPageLayoutPreset2["Landing"] = "landing";
  return RevisionPageLayoutPreset2;
})(RevisionPageLayoutPreset || {});
var IntegrationTarget = /* @__PURE__ */ ((IntegrationTarget2) => {
  IntegrationTarget2["All"] = "all";
  IntegrationTarget2["Site"] = "site";
  IntegrationTarget2["Space"] = "space";
  IntegrationTarget2["Organization"] = "organization";
  return IntegrationTarget2;
})(IntegrationTarget || {});
var IntegrationVisibility = /* @__PURE__ */ ((IntegrationVisibility2) => {
  IntegrationVisibility2["Public"] = "public";
  IntegrationVisibility2["Private"] = "private";
  IntegrationVisibility2["Unlisted"] = "unlisted";
  return IntegrationVisibility2;
})(IntegrationVisibility || {});
var IntegrationScope = /* @__PURE__ */ ((IntegrationScope2) => {
  IntegrationScope2["SpaceViewsRead"] = "space:views:read";
  IntegrationScope2["SpaceContentRead"] = "space:content:read";
  IntegrationScope2["SpaceContentWrite"] = "space:content:write";
  IntegrationScope2["SpaceMetadataRead"] = "space:metadata:read";
  IntegrationScope2["SpaceMetadataWrite"] = "space:metadata:write";
  IntegrationScope2["SpaceScriptInject"] = "space:script:inject";
  IntegrationScope2["SpaceScriptCookies"] = "space:script:cookies";
  IntegrationScope2["SpaceGitSync"] = "space:git:sync";
  IntegrationScope2["SpaceVisitorAuth"] = "space:visitor:auth";
  IntegrationScope2["SiteMetadataRead"] = "site:metadata:read";
  IntegrationScope2["SiteViewsRead"] = "site:views:read";
  IntegrationScope2["SiteScriptInject"] = "site:script:inject";
  IntegrationScope2["SiteScriptCookies"] = "site:script:cookies";
  IntegrationScope2["SiteVisitorAuth"] = "site:visitor:auth";
  IntegrationScope2["SiteAdaptiveRead"] = "site:adaptive:read";
  IntegrationScope2["SiteAdaptiveWrite"] = "site:adaptive:write";
  IntegrationScope2["OpenapiRead"] = "openapi:read";
  IntegrationScope2["OpenapiWrite"] = "openapi:write";
  IntegrationScope2["ConversationsIngest"] = "conversations:ingest";
  return IntegrationScope2;
})(IntegrationScope || {});
var IntegrationCategory = /* @__PURE__ */ ((IntegrationCategory2) => {
  IntegrationCategory2["Analytics"] = "analytics";
  IntegrationCategory2["Collaboration"] = "collaboration";
  IntegrationCategory2["Content"] = "content";
  IntegrationCategory2["Gitsync"] = "gitsync";
  IntegrationCategory2["Marketing"] = "marketing";
  IntegrationCategory2["VisitorAuth"] = "visitor-auth";
  IntegrationCategory2["Other"] = "other";
  return IntegrationCategory2;
})(IntegrationCategory || {});
var IntegrationInstallationStatus = /* @__PURE__ */ ((IntegrationInstallationStatus2) => {
  IntegrationInstallationStatus2["Active"] = "active";
  IntegrationInstallationStatus2["Pending"] = "pending";
  IntegrationInstallationStatus2["Paused"] = "paused";
  return IntegrationInstallationStatus2;
})(IntegrationInstallationStatus || {});
var IntegrationInstallationSpaceSelection = /* @__PURE__ */ ((IntegrationInstallationSpaceSelection2) => {
  IntegrationInstallationSpaceSelection2["All"] = "all";
  IntegrationInstallationSpaceSelection2["Selected"] = "selected";
  return IntegrationInstallationSpaceSelection2;
})(IntegrationInstallationSpaceSelection || {});
var IntegrationInstallationSiteSelection = /* @__PURE__ */ ((IntegrationInstallationSiteSelection2) => {
  IntegrationInstallationSiteSelection2["All"] = "all";
  IntegrationInstallationSiteSelection2["Selected"] = "selected";
  return IntegrationInstallationSiteSelection2;
})(IntegrationInstallationSiteSelection || {});
var SiteType = /* @__PURE__ */ ((SiteType2) => {
  SiteType2["Basic"] = "basic";
  SiteType2["Premium"] = "premium";
  SiteType2["Ultimate"] = "ultimate";
  SiteType2["Sponsored"] = "sponsored";
  SiteType2["LegacyBasic"] = "legacy-basic";
  SiteType2["LegacyPremium"] = "legacy-premium";
  return SiteType2;
})(SiteType || {});
var SiteVisibility = /* @__PURE__ */ ((SiteVisibility2) => {
  SiteVisibility2["Public"] = "public";
  SiteVisibility2["Unlisted"] = "unlisted";
  SiteVisibility2["ShareLink"] = "share-link";
  SiteVisibility2["VisitorAuth"] = "visitor-auth";
  return SiteVisibility2;
})(SiteVisibility || {});
var SiteAdsTopic = /* @__PURE__ */ ((SiteAdsTopic2) => {
  SiteAdsTopic2["Webdev"] = "webdev";
  SiteAdsTopic2["Crypto"] = "crypto";
  return SiteAdsTopic2;
})(SiteAdsTopic || {});
var SiteAgentsContext = /* @__PURE__ */ ((SiteAgentsContext2) => {
  SiteAgentsContext2["Excluded"] = "excluded";
  SiteAgentsContext2["Included"] = "included";
  return SiteAgentsContext2;
})(SiteAgentsContext || {});
var SiteFeatureKey = /* @__PURE__ */ ((SiteFeatureKey2) => {
  SiteFeatureKey2["SitesAdaptiveContent"] = "sites-adaptive-content";
  SiteFeatureKey2["SitesAdvancedCustomization"] = "sites-advanced-customization";
  SiteFeatureKey2["SitesAdvancedInsights"] = "sites-advanced-insights";
  SiteFeatureKey2["SitesAds"] = "sites-ads";
  SiteFeatureKey2["SitesAiSearch"] = "sites-ai-search";
  SiteFeatureKey2["SitesApiPlayground"] = "sites-api-playground";
  SiteFeatureKey2["SitesBasicCustomization"] = "sites-basic-customization";
  SiteFeatureKey2["SitesCustomDomain"] = "sites-custom-domain";
  SiteFeatureKey2["SitesCustomFonts"] = "sites-custom-fonts";
  SiteFeatureKey2["SitesCustomSubdirectory"] = "sites-custom-subdirectory";
  SiteFeatureKey2["SitesFullTextSearch"] = "sites-full-text-search";
  SiteFeatureKey2["SitesMultivariantSite"] = "sites-multivariant-site";
  SiteFeatureKey2["SitesNoCustomDomain"] = "sites-no-custom-domain";
  SiteFeatureKey2["SitesPageFeedback"] = "sites-page-feedback";
  SiteFeatureKey2["SitesPageTrafficInsights"] = "sites-page-traffic-insights";
  SiteFeatureKey2["SitesPdfExport"] = "sites-pdf-export";
  SiteFeatureKey2["SitesPreviewDeployments"] = "sites-preview-deployments";
  SiteFeatureKey2["SitesPublicVisibility"] = "sites-public-visibility";
  SiteFeatureKey2["SitesRedirects"] = "sites-redirects";
  SiteFeatureKey2["SitesSearchInsights"] = "sites-search-insights";
  SiteFeatureKey2["SitesSections"] = "sites-sections";
  SiteFeatureKey2["SitesSeo"] = "sites-seo";
  SiteFeatureKey2["SitesShareLinks"] = "sites-share-links";
  SiteFeatureKey2["SitesUnlistedVisibility"] = "sites-unlisted-visibility";
  SiteFeatureKey2["SitesUserContribution"] = "sites-user-contribution";
  SiteFeatureKey2["SitesVisitorAuthentication"] = "sites-visitor-authentication";
  SiteFeatureKey2["SitesVisitors"] = "sites-visitors";
  return SiteFeatureKey2;
})(SiteFeatureKey || {});
var SiteCustomizationFeature = /* @__PURE__ */ ((SiteCustomizationFeature2) => {
  SiteCustomizationFeature2["HeaderLogo"] = "header-logo";
  SiteCustomizationFeature2["ThemePreset"] = "theme-preset";
  SiteCustomizationFeature2["PremiumFonts"] = "premium-fonts";
  SiteCustomizationFeature2["CustomIcons"] = "custom-icons";
  SiteCustomizationFeature2["FooterLogo"] = "footer-logo";
  SiteCustomizationFeature2["FooterLinks"] = "footer-links";
  SiteCustomizationFeature2["FooterCopyright"] = "footer-copyright";
  SiteCustomizationFeature2["SemanticColors"] = "semantic-colors";
  return SiteCustomizationFeature2;
})(SiteCustomizationFeature || {});
var ContentKitIcon = /* @__PURE__ */ ((ContentKitIcon2) => {
  ContentKitIcon2["Close"] = "close";
  ContentKitIcon2["Edit"] = "edit";
  ContentKitIcon2["Github"] = "github";
  ContentKitIcon2["Gitlab"] = "gitlab";
  ContentKitIcon2["Maximize"] = "maximize";
  ContentKitIcon2["Email"] = "email";
  ContentKitIcon2["Settings"] = "settings";
  ContentKitIcon2["Search"] = "search";
  ContentKitIcon2["Delete"] = "delete";
  ContentKitIcon2["Star"] = "star";
  ContentKitIcon2["Warning"] = "warning";
  ContentKitIcon2["Link"] = "link";
  ContentKitIcon2["LinkExternal"] = "link-external";
  ContentKitIcon2["Eye"] = "eye";
  ContentKitIcon2["EyeOff"] = "eye-off";
  ContentKitIcon2["Lock"] = "lock";
  ContentKitIcon2["Check"] = "check";
  ContentKitIcon2["CheckCircle"] = "check-circle";
  return ContentKitIcon2;
})(ContentKitIcon || {});
var TeamMemberRole = /* @__PURE__ */ ((TeamMemberRole2) => {
  TeamMemberRole2["Owner"] = "owner";
  TeamMemberRole2["Member"] = "member";
  return TeamMemberRole2;
})(TeamMemberRole || {});
var BillingSwitchAction = /* @__PURE__ */ ((BillingSwitchAction2) => {
  BillingSwitchAction2["Trial"] = "trial";
  BillingSwitchAction2["Upgrade"] = "upgrade";
  BillingSwitchAction2["UpgradePassive"] = "upgrade_passive";
  BillingSwitchAction2["Downgrade"] = "downgrade";
  BillingSwitchAction2["UndoCancel"] = "undo_cancel";
  BillingSwitchAction2["SwitchInterval"] = "switch_interval";
  return BillingSwitchAction2;
})(BillingSwitchAction || {});
var SAMLProviderStatus = /* @__PURE__ */ ((SAMLProviderStatus2) => {
  SAMLProviderStatus2["Active"] = "active";
  SAMLProviderStatus2["Pending"] = "pending";
  return SAMLProviderStatus2;
})(SAMLProviderStatus || {});
var AgentTaskStatus = /* @__PURE__ */ ((AgentTaskStatus2) => {
  AgentTaskStatus2["Backlog"] = "backlog";
  AgentTaskStatus2["Started"] = "started";
  AgentTaskStatus2["Completed"] = "completed";
  AgentTaskStatus2["Canceled"] = "canceled";
  return AgentTaskStatus2;
})(AgentTaskStatus || {});
var StorageUploadKind = /* @__PURE__ */ ((StorageUploadKind2) => {
  StorageUploadKind2["CustomizationFont"] = "customization_font";
  return StorageUploadKind2;
})(StorageUploadKind || {});
var CustomizationTheme = /* @__PURE__ */ ((CustomizationTheme2) => {
  CustomizationTheme2["Clean"] = "clean";
  CustomizationTheme2["Muted"] = "muted";
  CustomizationTheme2["Bold"] = "bold";
  CustomizationTheme2["Gradient"] = "gradient";
  return CustomizationTheme2;
})(CustomizationTheme || {});
var CustomizationCorners = /* @__PURE__ */ ((CustomizationCorners2) => {
  CustomizationCorners2["Straight"] = "straight";
  CustomizationCorners2["Rounded"] = "rounded";
  CustomizationCorners2["Circular"] = "circular";
  return CustomizationCorners2;
})(CustomizationCorners || {});
var CustomizationDepth = /* @__PURE__ */ ((CustomizationDepth2) => {
  CustomizationDepth2["Subtle"] = "subtle";
  CustomizationDepth2["Flat"] = "flat";
  return CustomizationDepth2;
})(CustomizationDepth || {});
var CustomizationLinksStyle = /* @__PURE__ */ ((CustomizationLinksStyle2) => {
  CustomizationLinksStyle2["Default"] = "default";
  CustomizationLinksStyle2["Accent"] = "accent";
  return CustomizationLinksStyle2;
})(CustomizationLinksStyle || {});
var CustomizationDefaultFont = /* @__PURE__ */ ((CustomizationDefaultFont2) => {
  CustomizationDefaultFont2["ABCFavorit"] = "ABCFavorit";
  CustomizationDefaultFont2["Inter"] = "Inter";
  CustomizationDefaultFont2["Roboto"] = "Roboto";
  CustomizationDefaultFont2["RobotoSlab"] = "RobotoSlab";
  CustomizationDefaultFont2["OpenSans"] = "OpenSans";
  CustomizationDefaultFont2["SourceSansPro"] = "SourceSansPro";
  CustomizationDefaultFont2["Lato"] = "Lato";
  CustomizationDefaultFont2["Ubuntu"] = "Ubuntu";
  CustomizationDefaultFont2["Raleway"] = "Raleway";
  CustomizationDefaultFont2["Merriweather"] = "Merriweather";
  CustomizationDefaultFont2["Overpass"] = "Overpass";
  CustomizationDefaultFont2["NotoSans"] = "NotoSans";
  CustomizationDefaultFont2["IBMPlexSerif"] = "IBMPlexSerif";
  CustomizationDefaultFont2["Poppins"] = "Poppins";
  CustomizationDefaultFont2["FiraSans"] = "FiraSans";
  return CustomizationDefaultFont2;
})(CustomizationDefaultFont || {});
var CustomizationBackground = /* @__PURE__ */ ((CustomizationBackground2) => {
  CustomizationBackground2["Plain"] = "plain";
  CustomizationBackground2["Match"] = "match";
  return CustomizationBackground2;
})(CustomizationBackground || {});
var CustomizationIconsStyle = /* @__PURE__ */ ((CustomizationIconsStyle2) => {
  CustomizationIconsStyle2["Regular"] = "regular";
  CustomizationIconsStyle2["Solid"] = "solid";
  CustomizationIconsStyle2["Duotone"] = "duotone";
  CustomizationIconsStyle2["Light"] = "light";
  CustomizationIconsStyle2["Thin"] = "thin";
  return CustomizationIconsStyle2;
})(CustomizationIconsStyle || {});
var CustomizationSidebarBackgroundStyle = /* @__PURE__ */ ((CustomizationSidebarBackgroundStyle2) => {
  CustomizationSidebarBackgroundStyle2["Default"] = "default";
  CustomizationSidebarBackgroundStyle2["Filled"] = "filled";
  return CustomizationSidebarBackgroundStyle2;
})(CustomizationSidebarBackgroundStyle || {});
var CustomizationSidebarListStyle = /* @__PURE__ */ ((CustomizationSidebarListStyle2) => {
  CustomizationSidebarListStyle2["Default"] = "default";
  CustomizationSidebarListStyle2["Pill"] = "pill";
  CustomizationSidebarListStyle2["Line"] = "line";
  return CustomizationSidebarListStyle2;
})(CustomizationSidebarListStyle || {});
var CustomizationSearchStyle = /* @__PURE__ */ ((CustomizationSearchStyle2) => {
  CustomizationSearchStyle2["Prominent"] = "prominent";
  CustomizationSearchStyle2["Subtle"] = "subtle";
  return CustomizationSearchStyle2;
})(CustomizationSearchStyle || {});
var CustomizationLocale = /* @__PURE__ */ ((CustomizationLocale2) => {
  CustomizationLocale2["En"] = "en";
  CustomizationLocale2["Fr"] = "fr";
  CustomizationLocale2["Es"] = "es";
  CustomizationLocale2["Zh"] = "zh";
  CustomizationLocale2["Ja"] = "ja";
  CustomizationLocale2["De"] = "de";
  CustomizationLocale2["Nl"] = "nl";
  CustomizationLocale2["No"] = "no";
  CustomizationLocale2["PtBr"] = "pt-br";
  return CustomizationLocale2;
})(CustomizationLocale || {});
var CustomizationHeaderPreset = /* @__PURE__ */ ((CustomizationHeaderPreset2) => {
  CustomizationHeaderPreset2["Default"] = "default";
  CustomizationHeaderPreset2["Bold"] = "bold";
  CustomizationHeaderPreset2["Contrast"] = "contrast";
  CustomizationHeaderPreset2["Custom"] = "custom";
  CustomizationHeaderPreset2["None"] = "none";
  return CustomizationHeaderPreset2;
})(CustomizationHeaderPreset || {});
var CustomizationThemeMode = /* @__PURE__ */ ((CustomizationThemeMode2) => {
  CustomizationThemeMode2["Light"] = "light";
  CustomizationThemeMode2["Dark"] = "dark";
  return CustomizationThemeMode2;
})(CustomizationThemeMode || {});
var SiteExternalLinksTarget = /* @__PURE__ */ ((SiteExternalLinksTarget2) => {
  SiteExternalLinksTarget2["Self"] = "self";
  SiteExternalLinksTarget2["Blank"] = "blank";
  return SiteExternalLinksTarget2;
})(SiteExternalLinksTarget || {});
var AIMessageRole = /* @__PURE__ */ ((AIMessageRole2) => {
  AIMessageRole2["User"] = "user";
  AIMessageRole2["Assistant"] = "assistant";
  AIMessageRole2["Developer"] = "developer";
  return AIMessageRole2;
})(AIMessageRole || {});
var AIModel = /* @__PURE__ */ ((AIModel2) => {
  AIModel2["Fast"] = "fast";
  AIModel2["ReasoningLow"] = "reasoning-low";
  AIModel2["ReasoningMedium"] = "reasoning-medium";
  AIModel2["ReasoningHigh"] = "reasoning-high";
  return AIModel2;
})(AIModel || {});
var PageFeedbackRating = /* @__PURE__ */ ((PageFeedbackRating2) => {
  PageFeedbackRating2["Bad"] = "bad";
  PageFeedbackRating2["Ok"] = "ok";
  PageFeedbackRating2["Good"] = "good";
  return PageFeedbackRating2;
})(PageFeedbackRating || {});
var SiteInsightsLinkPosition = /* @__PURE__ */ ((SiteInsightsLinkPosition2) => {
  SiteInsightsLinkPosition2["Announcement"] = "announcement";
  SiteInsightsLinkPosition2["Header"] = "header";
  SiteInsightsLinkPosition2["Footer"] = "footer";
  SiteInsightsLinkPosition2["Sidebar"] = "sidebar";
  SiteInsightsLinkPosition2["Content"] = "content";
  return SiteInsightsLinkPosition2;
})(SiteInsightsLinkPosition || {});
var SiteInsightsTrademarkPlacement = /* @__PURE__ */ ((SiteInsightsTrademarkPlacement2) => {
  SiteInsightsTrademarkPlacement2["Sidebar"] = "sidebar";
  SiteInsightsTrademarkPlacement2["Ad"] = "ad";
  SiteInsightsTrademarkPlacement2["Footer"] = "footer";
  SiteInsightsTrademarkPlacement2["Pdf"] = "pdf";
  return SiteInsightsTrademarkPlacement2;
})(SiteInsightsTrademarkPlacement || {});
var SiteInsightsAdPlacement = /* @__PURE__ */ ((SiteInsightsAdPlacement2) => {
  SiteInsightsAdPlacement2["Aside"] = "aside";
  return SiteInsightsAdPlacement2;
})(SiteInsightsAdPlacement || {});
var SiteInsightsEventType = /* @__PURE__ */ ((SiteInsightsEventType2) => {
  SiteInsightsEventType2["PageView"] = "page_view";
  SiteInsightsEventType2["SearchOpen"] = "search_open";
  SiteInsightsEventType2["SearchTypeQuery"] = "search_type_query";
  SiteInsightsEventType2["SearchOpenResult"] = "search_open_result";
  SiteInsightsEventType2["PagePostFeedback"] = "page_post_feedback";
  SiteInsightsEventType2["PagePostFeedbackComment"] = "page_post_feedback_comment";
  SiteInsightsEventType2["AskQuestion"] = "ask_question";
  SiteInsightsEventType2["LinkClick"] = "link_click";
  SiteInsightsEventType2["ApiClientOpen"] = "api_client_open";
  SiteInsightsEventType2["ApiClientRequest"] = "api_client_request";
  SiteInsightsEventType2["AdClick"] = "ad_click";
  SiteInsightsEventType2["AdDisplay"] = "ad_display";
  SiteInsightsEventType2["TrademarkClick"] = "trademark_click";
  return SiteInsightsEventType2;
})(SiteInsightsEventType || {});
var SiteInsightsVisitorBrowser = /* @__PURE__ */ ((SiteInsightsVisitorBrowser2) => {
  SiteInsightsVisitorBrowser2["Chrome"] = "chrome";
  SiteInsightsVisitorBrowser2["Firefox"] = "firefox";
  SiteInsightsVisitorBrowser2["Safari"] = "safari";
  SiteInsightsVisitorBrowser2["Edge"] = "edge";
  SiteInsightsVisitorBrowser2["Ie"] = "ie";
  SiteInsightsVisitorBrowser2["Opera"] = "opera";
  SiteInsightsVisitorBrowser2["Unknown"] = "unknown";
  return SiteInsightsVisitorBrowser2;
})(SiteInsightsVisitorBrowser || {});
var SiteInsightsVisitorDevice = /* @__PURE__ */ ((SiteInsightsVisitorDevice2) => {
  SiteInsightsVisitorDevice2["Desktop"] = "desktop";
  SiteInsightsVisitorDevice2["Tablet"] = "tablet";
  SiteInsightsVisitorDevice2["Mobile"] = "mobile";
  SiteInsightsVisitorDevice2["Unknown"] = "unknown";
  return SiteInsightsVisitorDevice2;
})(SiteInsightsVisitorDevice || {});
var SiteInsightsVisitorOS = /* @__PURE__ */ ((SiteInsightsVisitorOS2) => {
  SiteInsightsVisitorOS2["Windows"] = "windows";
  SiteInsightsVisitorOS2["Macos"] = "macos";
  SiteInsightsVisitorOS2["Linux"] = "linux";
  SiteInsightsVisitorOS2["Android"] = "android";
  SiteInsightsVisitorOS2["Ios"] = "ios";
  SiteInsightsVisitorOS2["Unknown"] = "unknown";
  return SiteInsightsVisitorOS2;
})(SiteInsightsVisitorOS || {});
var SiteInsightsVisitorBot = /* @__PURE__ */ ((SiteInsightsVisitorBot2) => {
  SiteInsightsVisitorBot2["Unknown"] = "unknown";
  SiteInsightsVisitorBot2["Googlebot"] = "googlebot";
  SiteInsightsVisitorBot2["Bingbot"] = "bingbot";
  SiteInsightsVisitorBot2["Duckduckbot"] = "duckduckbot";
  SiteInsightsVisitorBot2["Facebookbot"] = "facebookbot";
  SiteInsightsVisitorBot2["Applebot"] = "applebot";
  SiteInsightsVisitorBot2["Chatgpt"] = "chatgpt";
  SiteInsightsVisitorBot2["Anthropic"] = "anthropic";
  return SiteInsightsVisitorBot2;
})(SiteInsightsVisitorBot || {});
var SiteInsightsQueryOperator = /* @__PURE__ */ ((SiteInsightsQueryOperator2) => {
  SiteInsightsQueryOperator2["In"] = "in";
  SiteInsightsQueryOperator2["NotIn"] = "notIn";
  SiteInsightsQueryOperator2["GreaterThan"] = "greaterThan";
  SiteInsightsQueryOperator2["GreaterThanOrEqual"] = "greaterThanOrEqual";
  SiteInsightsQueryOperator2["LessThan"] = "lessThan";
  SiteInsightsQueryOperator2["LessThanOrEqual"] = "lessThanOrEqual";
  return SiteInsightsQueryOperator2;
})(SiteInsightsQueryOperator || {});
var SiteInsightsQueryRange = /* @__PURE__ */ ((SiteInsightsQueryRange2) => {
  SiteInsightsQueryRange2["LastYear"] = "lastYear";
  SiteInsightsQueryRange2["Last3Months"] = "last3Months";
  SiteInsightsQueryRange2["Last30Days"] = "last30Days";
  SiteInsightsQueryRange2["Last7Days"] = "last7Days";
  SiteInsightsQueryRange2["Last24Hours"] = "last24Hours";
  return SiteInsightsQueryRange2;
})(SiteInsightsQueryRange || {});
var CustomHostnameDnsStatus = /* @__PURE__ */ ((CustomHostnameDnsStatus2) => {
  CustomHostnameDnsStatus2["DnsPassed"] = "dns_passed";
  CustomHostnameDnsStatus2["DnsWrongCname"] = "dns_wrong_cname";
  CustomHostnameDnsStatus2["DnsNoCname"] = "dns_no_cname";
  CustomHostnameDnsStatus2["DnsCloudflareProxied"] = "dns_cloudflare_proxied";
  CustomHostnameDnsStatus2["DnsWrongCaa"] = "dns_wrong_caa";
  return CustomHostnameDnsStatus2;
})(CustomHostnameDnsStatus || {});
var CustomHostnameSslStatus = /* @__PURE__ */ ((CustomHostnameSslStatus2) => {
  CustomHostnameSslStatus2["Live"] = "live";
  CustomHostnameSslStatus2["SslUnknown"] = "ssl_unknown";
  CustomHostnameSslStatus2["SslPending"] = "ssl_pending";
  CustomHostnameSslStatus2["SslFailed"] = "ssl_failed";
  CustomHostnameSslStatus2["SslRetryExpired"] = "ssl_retry_expired";
  return CustomHostnameSslStatus2;
})(CustomHostnameSslStatus || {});
var CustomHostnameErrorStatus = /* @__PURE__ */ ((CustomHostnameErrorStatus2) => {
  CustomHostnameErrorStatus2["InvalidDomain"] = "invalid_domain";
  CustomHostnameErrorStatus2["InternalError"] = "internal_error";
  return CustomHostnameErrorStatus2;
})(CustomHostnameErrorStatus || {});
var CloudflareHostnameStatus = /* @__PURE__ */ ((CloudflareHostnameStatus2) => {
  CloudflareHostnameStatus2["Pending"] = "pending";
  CloudflareHostnameStatus2["Active"] = "active";
  CloudflareHostnameStatus2["Blocked"] = "blocked";
  CloudflareHostnameStatus2["Moved"] = "moved";
  CloudflareHostnameStatus2["Deleted"] = "deleted";
  return CloudflareHostnameStatus2;
})(CloudflareHostnameStatus || {});
var CloudflareHostnameTLSStatus = /* @__PURE__ */ ((CloudflareHostnameTLSStatus2) => {
  CloudflareHostnameTLSStatus2["Initializing"] = "initializing";
  CloudflareHostnameTLSStatus2["PendingValidation"] = "pending_validation";
  CloudflareHostnameTLSStatus2["PendingIssuance"] = "pending_issuance";
  CloudflareHostnameTLSStatus2["PendingDeployment"] = "pending_deployment";
  CloudflareHostnameTLSStatus2["Active"] = "active";
  CloudflareHostnameTLSStatus2["PendingDeletion"] = "pending_deletion";
  CloudflareHostnameTLSStatus2["PendingCleanup"] = "pending_cleanup";
  CloudflareHostnameTLSStatus2["Deleted"] = "deleted";
  return CloudflareHostnameTLSStatus2;
})(CloudflareHostnameTLSStatus || {});
var CloudflareHostnameTLSValidationMethod = /* @__PURE__ */ ((CloudflareHostnameTLSValidationMethod2) => {
  CloudflareHostnameTLSValidationMethod2["Http"] = "http";
  CloudflareHostnameTLSValidationMethod2["Txt"] = "txt";
  CloudflareHostnameTLSValidationMethod2["Email"] = "email";
  return CloudflareHostnameTLSValidationMethod2;
})(CloudflareHostnameTLSValidationMethod || {});
var GitBookUsers = /* @__PURE__ */ ((GitBookUsers2) => {
  GitBookUsers2["GitbookAgent"] = "gitbook:agent";
  return GitBookUsers2;
})(GitBookUsers || {});
var RevisionSemanticChangeType = /* @__PURE__ */ ((RevisionSemanticChangeType2) => {
  RevisionSemanticChangeType2["PageCreated"] = "page_created";
  RevisionSemanticChangeType2["PageEdited"] = "page_edited";
  RevisionSemanticChangeType2["PageDeleted"] = "page_deleted";
  RevisionSemanticChangeType2["PageMoved"] = "page_moved";
  RevisionSemanticChangeType2["FileCreated"] = "file_created";
  RevisionSemanticChangeType2["FileEdited"] = "file_edited";
  RevisionSemanticChangeType2["FileDeleted"] = "file_deleted";
  RevisionSemanticChangeType2["CustomFieldsEdited"] = "custom_fields_edited";
  return RevisionSemanticChangeType2;
})(RevisionSemanticChangeType || {});
var GitSyncOperationState = /* @__PURE__ */ ((GitSyncOperationState2) => {
  GitSyncOperationState2["Running"] = "running";
  GitSyncOperationState2["Failure"] = "failure";
  GitSyncOperationState2["Success"] = "success";
  return GitSyncOperationState2;
})(GitSyncOperationState || {});
var GitSyncOperationDirection = /* @__PURE__ */ ((GitSyncOperationDirection2) => {
  GitSyncOperationDirection2["Export"] = "export";
  GitSyncOperationDirection2["Import"] = "import";
  return GitSyncOperationDirection2;
})(GitSyncOperationDirection || {});
var GitSyncOperationStage = /* @__PURE__ */ ((GitSyncOperationStage2) => {
  GitSyncOperationStage2["RepoFetch"] = "repo_fetch";
  GitSyncOperationStage2["ConfigCheck"] = "config_check";
  GitSyncOperationStage2["ContentProcess"] = "content_process";
  GitSyncOperationStage2["Finalize"] = "finalize";
  return GitSyncOperationStage2;
})(GitSyncOperationStage || {});
var APIIntegrationScope = /* @__PURE__ */ ((APIIntegrationScope2) => {
  APIIntegrationScope2["IntegrationRead"] = "integration:read";
  APIIntegrationScope2["IntegrationUpdate"] = "integration:update";
  APIIntegrationScope2["IntegrationInstallationRead"] = "integration:installation:read";
  APIIntegrationScope2["IntegrationInstallationUpdate"] = "integration:installation:update";
  return APIIntegrationScope2;
})(APIIntegrationScope || {});
var SiteAdsStatus = /* @__PURE__ */ ((SiteAdsStatus2) => {
  SiteAdsStatus2["Pending"] = "pending";
  SiteAdsStatus2["InReview"] = "in-review";
  SiteAdsStatus2["Live"] = "live";
  SiteAdsStatus2["Rejected"] = "rejected";
  SiteAdsStatus2["Disabled"] = "disabled";
  return SiteAdsStatus2;
})(SiteAdsStatus || {});
var AgentStatus = /* @__PURE__ */ ((AgentStatus2) => {
  AgentStatus2["Idle"] = "idle";
  AgentStatus2["Processing"] = "processing";
  AgentStatus2["Errored"] = "errored";
  return AgentStatus2;
})(AgentStatus || {});
var ContentType = /* @__PURE__ */ ((ContentType2) => {
  ContentType2["Json"] = "application/json";
  ContentType2["FormData"] = "multipart/form-data";
  ContentType2["UrlEncoded"] = "application/x-www-form-urlencoded";
  ContentType2["Text"] = "text/plain";
  return ContentType2;
})(ContentType || {});
var HttpClient = class {
  baseUrl = "{host}/v1";
  securityData = null;
  securityWorker;
  abortControllers = /* @__PURE__ */ new Map();
  customFetch = (...fetchParams) => fetch(...fetchParams);
  baseApiParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer"
  };
  constructor(apiConfig = {}) {
    Object.assign(this, apiConfig);
  }
  setSecurityData = (data) => {
    this.securityData = data;
  };
  encodeQueryParam(key, value) {
    const encodedKey = encodeURIComponent(key);
    return `${encodedKey}=${encodeURIComponent(typeof value === "number" ? value : `${value}`)}`;
  }
  addQueryParam(query, key) {
    return this.encodeQueryParam(key, query[key]);
  }
  addArrayQueryParam(query, key) {
    const value = query[key];
    return value.map((v) => this.encodeQueryParam(key, v)).join("&");
  }
  toQueryString(rawQuery) {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter((key) => "undefined" !== typeof query[key]);
    return keys.map(
      (key) => Array.isArray(query[key]) ? this.addArrayQueryParam(query, key) : this.addQueryParam(query, key)
    ).join("&");
  }
  addQueryParams(rawQuery) {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? `?${queryString}` : "";
  }
  contentFormatters = {
    ["application/json" /* Json */]: (input) => input !== null && (typeof input === "object" || typeof input === "string") ? JSON.stringify(input) : input,
    ["text/plain" /* Text */]: (input) => input !== null && typeof input !== "string" ? JSON.stringify(input) : input,
    ["multipart/form-data" /* FormData */]: (input) => Object.keys(input || {}).reduce((formData, key) => {
      const property = input[key];
      formData.append(
        key,
        property instanceof Blob ? property : typeof property === "object" && property !== null ? JSON.stringify(property) : `${property}`
      );
      return formData;
    }, new FormData()),
    ["application/x-www-form-urlencoded" /* UrlEncoded */]: (input) => this.toQueryString(input)
  };
  mergeRequestParams(params1, params2) {
    return {
      ...this.baseApiParams,
      ...params1,
      ...params2 || {},
      headers: {
        ...this.baseApiParams.headers || {},
        ...params1.headers || {},
        ...params2 && params2.headers || {}
      }
    };
  }
  createAbortSignal = (cancelToken) => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController2 = this.abortControllers.get(cancelToken);
      if (abortController2) {
        return abortController2.signal;
      }
      return void 0;
    }
    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };
  abortRequest = (cancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);
    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };
  request = async ({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
  }) => {
    const secureParams = (typeof secure === "boolean" ? secure : this.baseApiParams.secure) && this.securityWorker && await this.securityWorker(this.securityData) || {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const queryString = query && this.toQueryString(query);
    const payloadFormatter = this.contentFormatters[type || "application/json" /* Json */];
    const responseFormat = format || requestParams.format;
    return this.customFetch(
      `${baseUrl || this.baseUrl || ""}${path}${queryString ? `?${queryString}` : ""}`,
      {
        ...requestParams,
        headers: {
          ...requestParams.headers || {},
          ...type && type !== "multipart/form-data" /* FormData */ ? { "Content-Type": type } : {}
        },
        signal: (cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal) || null,
        body: typeof body === "undefined" || body === null ? null : payloadFormatter(body)
      }
    ).then(async (response) => {
      const r = response;
      r.data = null;
      r.error = null;
      const data = !responseFormat ? r : await response[responseFormat]().then((data2) => {
        if (r.ok) {
          r.data = data2;
        } else {
          throw new Error(`${response.status} ${response.statusText}`);
        }
        return r;
      });
      if (cancelToken) {
        this.abortControllers.delete(cancelToken);
      }
      if (!response.ok)
        throw new Error(`${response.status} ${response.statusText}`);
      return data;
    });
  };
  streamRequest = ({
    body,
    path,
    type,
    baseUrl,
    cancelToken,
    secure,
    ...params
  }) => {
    return new import_event_iterator.EventIterator((queue) => {
      (async () => {
        const secureParams = (typeof secure === "boolean" ? secure : this.baseApiParams.secure) && this.securityWorker && await this.securityWorker(this.securityData) || {};
        const requestQuery = params.query;
        const requestParams = this.mergeRequestParams(params, secureParams);
        const queryString = requestQuery ? this.toQueryString(requestQuery) : void 0;
        const payloadFormatter = this.contentFormatters[type || "application/json" /* Json */];
        const response = await this.customFetch(
          `${baseUrl || this.baseUrl || ""}${path}${queryString ? `?${queryString}` : ""}`,
          {
            ...requestParams,
            headers: {
              ...requestParams.headers || {},
              ...type && type !== "multipart/form-data" /* FormData */ ? { "Content-Type": type } : {}
            },
            signal: cancelToken ? this.createAbortSignal(cancelToken) : requestParams.signal,
            body: typeof body === "undefined" || body === null ? null : payloadFormatter(body)
          }
        );
        if (!response.ok) {
          throw new Error(`${response.status} ${response.statusText}`);
        }
        if (!response.body) {
          throw new Error("Response body is empty");
        }
        const reader = response.body.getReader();
        const stop = () => {
          reader.cancel();
          queue.stop();
        };
        const parser = createParser({
          onEvent: (event) => {
            if (event.event === "done") {
              stop();
            } else if (event.event === "error") {
              const data = JSON.parse(event.data);
              reader.cancel();
              queue.fail(new Error(data.error.message));
            } else {
              const data = JSON.parse(event.data);
              queue.push(data);
            }
          },
          onError: (error) => {
            reader.cancel();
            queue.fail(error);
          }
        });
        const decoder = new TextDecoder();
        while (true) {
          const { done, value } = await reader.read();
          if (value) {
            parser.feed(decoder.decode(value));
          }
          if (done) {
            break;
          }
        }
        stop();
      })().catch((error) => {
        queue.fail(error);
      });
    });
  };
};
var Api = class extends HttpClient {
  getApiInformation = (params = {}) => this.request({
    path: `/`,
    method: "GET",
    secure: true,
    format: "json",
    ...params
  });
  user = {
    getAuthenticatedUser: (params = {}) => this.request({
      path: `/user`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    })
  };
  users = {
    getUserById: (userId, params = {}) => this.request({
      path: `/users/${userId}`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    updateUserById: (userId, data, params = {}) => this.request({
      path: `/users/${userId}`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    })
  };
  spaces = {
    getSpaceById: (spaceId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    updateSpaceById: (spaceId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    deleteSpaceById: (spaceId, params = {}) => this.request({
      path: `/spaces/${spaceId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    duplicateSpace: (spaceId, params = {}) => this.request({
      path: `/spaces/${spaceId}/duplicate`,
      method: "POST",
      secure: true,
      format: "json",
      ...params
    }),
    restoreSpace: (spaceId, params = {}) => this.request({
      path: `/spaces/${spaceId}/restore`,
      method: "POST",
      secure: true,
      format: "json",
      ...params
    }),
    moveSpace: (spaceId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/move`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    transferSpace: (spaceId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/transfer`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getEmbedByUrlInSpace: (spaceId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/embed`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    searchSpaceContent: (spaceId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/search`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    importGitRepository: (spaceId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/git/import`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      ...params
    }),
    exportToGitRepository: (spaceId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/git/export`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      ...params
    }),
    getSpaceGitInfo: (spaceId, params = {}) => this.request({
      path: `/spaces/${spaceId}/git/info`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    inviteToSpace: (spaceId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/permissions`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      ...params
    }),
    updateTeamPermissionInSpace: (spaceId, teamId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/permissions/teams/${teamId}`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      ...params
    }),
    removeTeamFromSpace: (spaceId, teamId, params = {}) => this.request({
      path: `/spaces/${spaceId}/permissions/teams/${teamId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    listUserPermissionsInSpace: (spaceId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/permissions/users`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    updateUserPermissionInSpace: (spaceId, userId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/permissions/users/${userId}`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      ...params
    }),
    removeUserFromSpace: (spaceId, userId, params = {}) => this.request({
      path: `/spaces/${spaceId}/permissions/users/${userId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    listTeamPermissionsInSpace: (spaceId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/permissions/teams`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getCurrentRevision: (spaceId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/content`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    importContent: (spaceId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/content/import`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    listPages: (spaceId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/content/pages`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listFiles: (spaceId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/content/files`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getFileById: (spaceId, fileId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/content/files/${fileId}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listSpaceFileBacklinks: (spaceId, fileId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/content/files/${fileId}/backlinks`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getPageById: (spaceId, pageId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/content/page/${pageId}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listPageLinksInSpace: (spaceId, pageId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/content/page/${pageId}/links`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listSpacePageBacklinks: (spaceId, pageId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/content/page/${pageId}/backlinks`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    importContentInPageById: (spaceId, pageId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/content/page/${pageId}/import`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getPageByPath: (spaceId, pagePath, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/content/path/${pagePath}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getReusableContentById: (spaceId, reusableContentId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/content/reusable-contents/${reusableContentId}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getComputedDocument: (spaceId, data, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/content/computed/document`,
      method: "POST",
      query,
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getComputedRevision: (spaceId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/content/computed/revision`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getDocumentById: (spaceId, documentId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/documents/${documentId}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    createChangeRequest: (spaceId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    listChangeRequestsForSpace: (spaceId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getChangeRequestById: (spaceId, changeRequestId, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    updateChangeRequestById: (spaceId, changeRequestId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    mergeChangeRequest: (spaceId, changeRequestId, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/merge`,
      method: "POST",
      secure: true,
      format: "json",
      ...params
    }),
    updateChangeRequest: (spaceId, changeRequestId, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/update`,
      method: "POST",
      secure: true,
      format: "json",
      ...params
    }),
    getReviewsByChangeRequestId: (spaceId, changeRequestId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/reviews`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    submitChangeRequestReview: (spaceId, changeRequestId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/reviews`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getRequestedReviewersByChangeRequestId: (spaceId, changeRequestId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/requested-reviewers`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    requestReviewersForChangeRequest: (spaceId, changeRequestId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/requested-reviewers`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    removeRequestedReviewerFromChangeRequest: (spaceId, changeRequestId, userId, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/requested-reviewers/${userId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    listChangeRequestLinks: (spaceId, changeRequestId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/links`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listCommentsInChangeRequest: (spaceId, changeRequestId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/comments`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    postCommentInChangeRequest: (spaceId, changeRequestId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/comments`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getCommentInChangeRequest: (spaceId, changeRequestId, commentId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/comments/${commentId}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    deleteCommentInChangeRequest: (spaceId, changeRequestId, commentId, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/comments/${commentId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    updateCommentInChangeRequest: (spaceId, changeRequestId, commentId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/comments/${commentId}`,
      method: "PUT",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    listCommentRepliesInChangeRequest: (spaceId, changeRequestId, commentId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/comments/${commentId}/replies`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    postCommentReplyInChangeRequest: (spaceId, changeRequestId, commentId, data, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/comments/${commentId}/replies`,
      method: "POST",
      query,
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getCommentReplyInChangeRequest: (spaceId, changeRequestId, commentId, commentReplyId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/comments/${commentId}/replies/${commentReplyId}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    updateCommentReplyInChangeRequest: (spaceId, changeRequestId, commentId, commentReplyId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/comments/${commentId}/replies/${commentReplyId}`,
      method: "PUT",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    deleteCommentReplyInChangeRequest: (spaceId, changeRequestId, commentId, commentReplyId, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/comments/${commentId}/replies/${commentReplyId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    getContributorsByChangeRequestId: (spaceId, changeRequestId, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/contributors`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    getRevisionOfChangeRequestById: (spaceId, changeRequestId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/content`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    importContentInChangeRequest: (spaceId, changeRequestId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/content/import`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    listPagesInChangeRequest: (spaceId, changeRequestId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/content/pages`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listFilesInChangeRequestById: (spaceId, changeRequestId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/content/files`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getFileInChangeRequestById: (spaceId, changeRequestId, fileId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/content/files/${fileId}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listChangeRequestFileBacklinks: (spaceId, changeRequestId, fileId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/content/files/${fileId}/backlinks`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getPageInChangeRequestById: (spaceId, changeRequestId, pageId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/content/page/${pageId}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listPageLinksInChangeRequest: (spaceId, changeRequestId, pageId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/content/page/${pageId}/links`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listChangeRequestPageBacklinks: (spaceId, changeRequestId, pageId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/content/page/${pageId}/backlinks`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    importContentInChangeRequestPageById: (spaceId, changeRequestId, pageId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/content/page/${pageId}/import`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getPageInChangeRequestByPath: (spaceId, changeRequestId, pagePath, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/content/path/${pagePath}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getReusableContentInChangeRequestById: (spaceId, changeRequestId, reusableContentId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/content/reusable-contents/${reusableContentId}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getChangeRequestPdf: (spaceId, changeRequestId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/pdf`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getRevisionById: (spaceId, revisionId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/revisions/${revisionId}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getRevisionSemanticChanges: (spaceId, revisionId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/revisions/${revisionId}/changes`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listPagesInRevisionById: (spaceId, revisionId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/revisions/${revisionId}/pages`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listFilesInRevisionById: (spaceId, revisionId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/revisions/${revisionId}/files`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getFileInRevisionById: (spaceId, revisionId, fileId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/revisions/${revisionId}/files/${fileId}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getPageInRevisionById: (spaceId, revisionId, pageId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/revisions/${revisionId}/page/${pageId}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getPageDocumentInRevisionById: (spaceId, revisionId, pageId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/revisions/${revisionId}/page/${pageId}/document`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getPageInRevisionByPath: (spaceId, revisionId, pagePath, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/revisions/${revisionId}/path/${pagePath}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getReusableContentInRevisionById: (spaceId, revisionId, reusableContentId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/revisions/${revisionId}/reusable-contents/${reusableContentId}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listCommentsInSpace: (spaceId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/comments`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    postCommentInSpace: (spaceId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/comments`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getCommentInSpace: (spaceId, commentId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/comments/${commentId}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    deleteCommentInSpace: (spaceId, commentId, params = {}) => this.request({
      path: `/spaces/${spaceId}/comments/${commentId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    updateCommentInSpace: (spaceId, commentId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/comments/${commentId}`,
      method: "PUT",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    listCommentRepliesInSpace: (spaceId, commentId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/comments/${commentId}/replies`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    postCommentReplyInSpace: (spaceId, commentId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/comments/${commentId}/replies`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getCommentReplyInSpace: (spaceId, commentId, commentReplyId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/comments/${commentId}/replies/${commentReplyId}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    updateCommentReplyInSpace: (spaceId, commentId, commentReplyId, data, params = {}) => this.request({
      path: `/spaces/${spaceId}/comments/${commentId}/replies/${commentReplyId}`,
      method: "PUT",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    deleteCommentReplyInSpace: (spaceId, commentId, commentReplyId, params = {}) => this.request({
      path: `/spaces/${spaceId}/comments/${commentId}/replies/${commentReplyId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    listCommentersInSpace: (spaceId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/commenters`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listCommentersInChangeRequest: (spaceId, changeRequestId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/change-requests/${changeRequestId}/commenters`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listPermissionsAggregateInSpace: (spaceId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/permissions/aggregate`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listSpaceIntegrations: (spaceId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/integrations`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listSpaceIntegrationsBlocks: (spaceId, params = {}) => this.request({
      path: `/spaces/${spaceId}/integration-blocks`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    listSpaceIntegrationScripts: (spaceId, params = {}) => this.request({
      path: `/spaces/${spaceId}/integration-scripts`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    getSpacePdf: (spaceId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/pdf`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listSpaceLinks: (spaceId, query, params = {}) => this.request({
      path: `/spaces/${spaceId}/links`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    })
  };
  collections = {
    getCollectionById: (collectionId, params = {}) => this.request({
      path: `/collections/${collectionId}`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    updateCollectionById: (collectionId, data, params = {}) => this.request({
      path: `/collections/${collectionId}`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    deleteCollectionById: (collectionId, params = {}) => this.request({
      path: `/collections/${collectionId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    listSpacesInCollectionById: (collectionId, query, params = {}) => this.request({
      path: `/collections/${collectionId}/spaces`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    moveCollection: (collectionId, data, params = {}) => this.request({
      path: `/collections/${collectionId}/move`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    transferCollection: (collectionId, data, params = {}) => this.request({
      path: `/collections/${collectionId}/transfer`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    inviteToCollection: (collectionId, data, params = {}) => this.request({
      path: `/collections/${collectionId}/permissions`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      ...params
    }),
    listTeamPermissionsInCollection: (collectionId, query, params = {}) => this.request({
      path: `/collections/${collectionId}/permissions/teams`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    updateTeamPermissionInCollection: (collectionId, teamId, data, params = {}) => this.request({
      path: `/collections/${collectionId}/permissions/teams/${teamId}`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      ...params
    }),
    removeTeamFromCollection: (collectionId, teamId, params = {}) => this.request({
      path: `/collections/${collectionId}/permissions/teams/${teamId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    listUserPermissionsInCollection: (collectionId, query, params = {}) => this.request({
      path: `/collections/${collectionId}/permissions/users`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    updateUserPermissionInCollection: (collectionId, userId, data, params = {}) => this.request({
      path: `/collections/${collectionId}/permissions/users/${userId}`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      ...params
    }),
    removeUserFromCollection: (collectionId, userId, params = {}) => this.request({
      path: `/collections/${collectionId}/permissions/users/${userId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    listPermissionsAggregateInCollection: (collectionId, query, params = {}) => this.request({
      path: `/collections/${collectionId}/permissions/aggregate`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    })
  };
  integrations = {
    listIntegrations: (query, params = {}) => this.request({
      path: `/integrations`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getIntegrationByName: (integrationName, params = {}) => this.request({
      path: `/integrations/${integrationName}`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    publishIntegration: (integrationName, data, params = {}) => this.request({
      path: `/integrations/${integrationName}`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    unpublishIntegration: (integrationName, params = {}) => this.request({
      path: `/integrations/${integrationName}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    listIntegrationInstallations: (integrationName, query, params = {}) => this.request({
      path: `/integrations/${integrationName}/installations`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    installIntegration: (integrationName, data, params = {}) => this.request({
      path: `/integrations/${integrationName}/installations`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    listIntegrationEvents: (integrationName, query, params = {}) => this.request({
      path: `/integrations/${integrationName}/events`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getIntegrationEvent: (integrationName, eventId, params = {}) => this.request({
      path: `/integrations/${integrationName}/events/${eventId}`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    listIntegrationSpaceInstallations: (integrationName, query, params = {}) => this.request({
      path: `/integrations/${integrationName}/spaces`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listIntegrationSiteInstallations: (integrationName, query, params = {}) => this.request({
      path: `/integrations/${integrationName}/sites`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    setIntegrationDevelopmentMode: (integrationName, data, params = {}) => this.request({
      path: `/integrations/${integrationName}/dev`,
      method: "PUT",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      ...params
    }),
    disableIntegrationDevelopmentMode: (integrationName, params = {}) => this.request({
      path: `/integrations/${integrationName}/dev`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    renderIntegrationUiWithGet: (integrationName, query, params = {}) => this.request({
      path: `/integrations/${integrationName}/render`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    renderIntegrationUiWithPost: (integrationName, data, params = {}) => this.request({
      path: `/integrations/${integrationName}/render`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    queueIntegrationTask: (integrationName, data, params = {}) => this.request({
      path: `/integrations/${integrationName}/tasks`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      ...params
    }),
    getIntegrationInstallationById: (integrationName, installationId, params = {}) => this.request({
      path: `/integrations/${integrationName}/installations/${installationId}`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    updateIntegrationInstallation: (integrationName, installationId, data, params = {}) => this.request({
      path: `/integrations/${integrationName}/installations/${installationId}`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    uninstallIntegration: (integrationName, installationId, params = {}) => this.request({
      path: `/integrations/${integrationName}/installations/${installationId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    createIntegrationInstallationToken: (integrationName, installationId, params = {}) => this.request({
      path: `/integrations/${integrationName}/installations/${installationId}/tokens`,
      method: "POST",
      secure: true,
      format: "json",
      ...params
    }),
    listIntegrationInstallationSpaces: (integrationName, installationId, query, params = {}) => this.request({
      path: `/integrations/${integrationName}/installations/${installationId}/spaces`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    installIntegrationOnSpace: (integrationName, installationId, data, query, params = {}) => this.request({
      path: `/integrations/${integrationName}/installations/${installationId}/spaces`,
      method: "POST",
      query,
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getIntegrationSpaceInstallation: (integrationName, installationId, spaceId, query, params = {}) => this.request({
      path: `/integrations/${integrationName}/installations/${installationId}/spaces/${spaceId}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    updateIntegrationSpaceInstallation: (integrationName, installationId, spaceId, data, query, params = {}) => this.request({
      path: `/integrations/${integrationName}/installations/${installationId}/spaces/${spaceId}`,
      method: "PATCH",
      query,
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    uninstallIntegrationFromSpace: (integrationName, installationId, spaceId, params = {}) => this.request({
      path: `/integrations/${integrationName}/installations/${installationId}/spaces/${spaceId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    listIntegrationInstallationSites: (integrationName, installationId, query, params = {}) => this.request({
      path: `/integrations/${integrationName}/installations/${installationId}/sites`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    installIntegrationOnSite: (integrationName, installationId, data, query, params = {}) => this.request({
      path: `/integrations/${integrationName}/installations/${installationId}/sites`,
      method: "POST",
      query,
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getIntegrationSiteInstallation: (integrationName, installationId, siteId, query, params = {}) => this.request({
      path: `/integrations/${integrationName}/installations/${installationId}/sites/${siteId}`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    updateIntegrationSiteInstallation: (integrationName, installationId, siteId, data, query, params = {}) => this.request({
      path: `/integrations/${integrationName}/installations/${installationId}/sites/${siteId}`,
      method: "PATCH",
      query,
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    uninstallIntegrationFromSite: (integrationName, installationId, siteId, params = {}) => this.request({
      path: `/integrations/${integrationName}/installations/${installationId}/sites/${siteId}`,
      method: "DELETE",
      secure: true,
      ...params
    })
  };
  orgs = {
    listOrganizationsForAuthenticatedUser: (query, params = {}) => this.request({
      path: `/orgs`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getOrganizationById: (organizationId, params = {}) => this.request({
      path: `/orgs/${organizationId}`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    updateOrganizationById: (organizationId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    listMembersInOrganizationById: (organizationId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/members`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getMemberInOrganizationById: (organizationId, userId, params = {}) => this.request({
      path: `/orgs/${organizationId}/members/${userId}`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    updateMemberInOrganizationById: (organizationId, userId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/members/${userId}`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    removeMemberFromOrganizationById: (organizationId, userId, params = {}) => this.request({
      path: `/orgs/${organizationId}/members/${userId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    updateOrganizationMemberLastSeenAt: (organizationId, params = {}) => this.request({
      path: `/orgs/${organizationId}/ping`,
      method: "POST",
      secure: true,
      format: "json",
      ...params
    }),
    setUserAsSsoMemberForOrganization: (organizationId, userId, params = {}) => this.request({
      path: `/orgs/${organizationId}/members/${userId}/sso`,
      method: "POST",
      secure: true,
      format: "json",
      ...params
    }),
    listSpacesForOrganizationMember: (organizationId, userId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/members/${userId}/spaces`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listTeamsForOrganizationMember: (organizationId, userId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/members/${userId}/teams`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listTeamsInOrganizationById: (organizationId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/teams`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    createOrganizationTeam: (organizationId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/teams`,
      method: "PUT",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getTeamInOrganizationById: (organizationId, teamId, params = {}) => this.request({
      path: `/orgs/${organizationId}/teams/${teamId}`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    updateTeamInOrganizationById: (organizationId, teamId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/teams/${teamId}`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    removeTeamFromOrganizationById: (organizationId, teamId, params = {}) => this.request({
      path: `/orgs/${organizationId}/teams/${teamId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    updateMembersInOrganizationTeam: (organizationId, teamId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/teams/${teamId}/members`,
      method: "PUT",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      ...params
    }),
    listTeamMembersInOrganizationById: (organizationId, teamId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/teams/${teamId}/members`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    addMemberToOrganizationTeamById: (organizationId, teamId, userId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/teams/${teamId}/members/${userId}`,
      method: "PUT",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      ...params
    }),
    deleteMemberFromOrganizationTeamById: (organizationId, teamId, userId, params = {}) => this.request({
      path: `/orgs/${organizationId}/teams/${teamId}/members/${userId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    inviteUsersToOrganization: (organizationId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/invites`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    joinOrganizationWithInvite: (organizationId, inviteId, params = {}) => this.request({
      path: `/orgs/${organizationId}/invites/${inviteId}`,
      method: "POST",
      secure: true,
      format: "json",
      ...params
    }),
    listOrganizationInviteLinks: (organizationId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/link-invites`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    createOrganizationInvite: (organizationId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/link-invites`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getOrganizationInviteLink: (organizationId, inviteId, params = {}) => this.request({
      path: `/orgs/${organizationId}/link-invites/${inviteId}`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    updateOrganizationInviteById: (organizationId, inviteId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/link-invites/${inviteId}`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    deleteOrganizationInviteById: (organizationId, inviteId, params = {}) => this.request({
      path: `/orgs/${organizationId}/link-invites/${inviteId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    searchOrganizationContent: (organizationId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/search`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listSpacesInOrganizationById: (organizationId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/spaces`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    createSpace: (organizationId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/spaces`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    listCollectionsInOrganizationById: (organizationId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/collections`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    createCollection: (organizationId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/collections`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    listOrganizationIntegrations: (organizationId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/integrations`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getOrganizationIntegrationStatus: (organizationId, integrationName, params = {}) => this.request({
      path: `/orgs/${organizationId}/integrations/${integrationName}/installation_status`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    listOrganizationInstallations: (organizationId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/installations`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listOrganizationIntegrationsStatus: (organizationId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/integrations/installations-status`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listSamlProvidersInOrganizationById: (organizationId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/saml`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    createOrganizationSamlProvider: (organizationId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/saml`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getOrganizationSamlProviderById: (organizationId, samlProviderId, params = {}) => this.request({
      path: `/orgs/${organizationId}/saml/${samlProviderId}`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    updateOrganizationSamlProvider: (organizationId, samlProviderId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/saml/${samlProviderId}`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    deleteOrganizationSamlProvider: (organizationId, samlProviderId, params = {}) => this.request({
      path: `/orgs/${organizationId}/saml/${samlProviderId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    listSsoProviderLoginsInOrganization: (organizationId, params = {}) => this.request({
      path: `/orgs/${organizationId}/sso`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    askInOrganization: (organizationId, data, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/ask`,
      method: "POST",
      query,
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getRecommendedQuestionsInOrganization: (organizationId, params = {}) => this.request({
      path: `/orgs/${organizationId}/ask/questions`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    streamRecommendedQuestionsInOrganization: (organizationId, params = {}) => this.streamRequest({
      path: `/orgs/${organizationId}/ask/questions/stream`,
      method: "GET",
      secure: true,
      ...params
    }),
    streamAskInOrganization: (organizationId, query, params = {}) => this.streamRequest({
      path: `/orgs/${organizationId}/ask/stream`,
      method: "GET",
      query,
      secure: true,
      ...params
    }),
    listOpenApiSpecs: (organizationId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/openapi`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    createOpenApiSpec: (organizationId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/openapi`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getOpenApiSpecBySlug: (organizationId, specSlug, params = {}) => this.request({
      path: `/orgs/${organizationId}/openapi/${specSlug}`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    createOrUpdateOpenApiSpecBySlug: (organizationId, specSlug, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/openapi/${specSlug}`,
      method: "PUT",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    deleteOpenApiSpecBySlug: (organizationId, specSlug, params = {}) => this.request({
      path: `/orgs/${organizationId}/openapi/${specSlug}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    listOpenApiSpecVersions: (organizationId, specSlug, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/openapi/${specSlug}/versions`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getLatestOpenApiSpecVersion: (organizationId, specSlug, params = {}) => this.request({
      path: `/orgs/${organizationId}/openapi/${specSlug}/versions/latest`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    getLatestOpenApiSpecVersionContent: (organizationId, specSlug, params = {}) => this.request({
      path: `/orgs/${organizationId}/openapi/${specSlug}/versions/latest/content`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    getOpenApiSpecVersionById: (organizationId, specSlug, versionId, params = {}) => this.request({
      path: `/orgs/${organizationId}/openapi/${specSlug}/versions/${versionId}`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    getOpenApiSpecVersionContentById: (organizationId, specSlug, versionId, params = {}) => this.request({
      path: `/orgs/${organizationId}/openapi/${specSlug}/versions/${versionId}/content`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    listConversationsIssuesClusters: (organizationId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/conversations-clusters`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getConversationsIssuesCluster: (organizationId, clusterId, params = {}) => this.request({
      path: `/orgs/${organizationId}/conversations-clusters/${clusterId}`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    listConversationsIssuesInCluster: (organizationId, clusterId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/conversations-clusters/${clusterId}/issues`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    ingestConversation: (organizationId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/conversations`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      ...params
    }),
    getAgentSetupState: (organizationId, params = {}) => this.request({
      path: `/orgs/${organizationId}/agents-setup`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    listAgentTasks: (organizationId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/agent-tasks`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getAgentTask: (organizationId, agentTaskId, params = {}) => this.request({
      path: `/orgs/${organizationId}/agent-tasks/${agentTaskId}`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    updateAgentTask: (organizationId, agentTaskId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/agent-tasks/${agentTaskId}`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    listTranslationSettings: (organizationId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/translations`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    createTranslationSettings: (organizationId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/translations`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getTranslationSettings: (organizationId, translationSettingsId, params = {}) => this.request({
      path: `/orgs/${organizationId}/translations/${translationSettingsId}`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    updateTranslationSettings: (organizationId, translationSettingsId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/translations/${translationSettingsId}`,
      method: "PUT",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    deleteTranslationSettings: (organizationId, translationSettingsId, params = {}) => this.request({
      path: `/orgs/${organizationId}/translations/${translationSettingsId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    listTranslationLanguages: (organizationId, translationSettingsId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/translations/${translationSettingsId}/languages`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getTranslationLanguage: (organizationId, translationSettingsId, translationLanguage, params = {}) => this.request({
      path: `/orgs/${organizationId}/translations/${translationSettingsId}/languages/${translationLanguage}`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    createOrUpdateTranslationLanguage: (organizationId, translationSettingsId, translationLanguage, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/translations/${translationSettingsId}/languages/${translationLanguage}`,
      method: "PUT",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    deleteTranslationLanguage: (organizationId, translationSettingsId, translationLanguage, params = {}) => this.request({
      path: `/orgs/${organizationId}/translations/${translationSettingsId}/languages/${translationLanguage}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    generateStorageUploadUrl: (organizationId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/storage/upload`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    listCustomFonts: (organizationId, params = {}) => this.request({
      path: `/orgs/${organizationId}/fonts`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    createCustomFont: (organizationId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/fonts`,
      method: "PUT",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getCustomFont: (organizationId, fontId, params = {}) => this.request({
      path: `/orgs/${organizationId}/fonts/${fontId}`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    updateCustomFont: (organizationId, fontId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/fonts/${fontId}`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    deleteCustomFont: (organizationId, fontId, params = {}) => this.request({
      path: `/orgs/${organizationId}/fonts/${fontId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    listSites: (organizationId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    createSite: (organizationId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getSiteById: (organizationId, siteId, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    updateSiteById: (organizationId, siteId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    deleteSiteById: (organizationId, siteId, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    getSiteAdaptiveSchema: (organizationId, siteId, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/adaptive-schema`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    updateSiteAdaptiveSchema: (organizationId, siteId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/adaptive-schema`,
      method: "PUT",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    listSiteAdaptiveTemplateConditions: (organizationId, siteId, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/adaptive-schema/template-conditions`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    getPublishedContentSite: (organizationId, siteId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/published`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    publishSite: (organizationId, siteId, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/publish`,
      method: "POST",
      secure: true,
      format: "json",
      ...params
    }),
    unpublishSite: (organizationId, siteId, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/unpublish`,
      method: "POST",
      secure: true,
      format: "json",
      ...params
    }),
    listSiteShareLinks: (organizationId, siteId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/share-links`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    createSiteShareLink: (organizationId, siteId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/share-links`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    updateSiteShareLinkById: (organizationId, siteId, shareLinkId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/share-links/${shareLinkId}`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    deleteSiteShareLinkById: (organizationId, siteId, shareLinkId, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/share-links/${shareLinkId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    getSiteStructure: (organizationId, siteId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/structure`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    sortSiteStructure: (organizationId, siteId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/structure/sort`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    getSitePublishingAuthById: (organizationId, siteId, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/publishing/auth`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    updateSitePublishingAuthById: (organizationId, siteId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/publishing/auth`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    regenerateSitePublishingAuthById: (organizationId, siteId, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/publishing/auth/regenerate`,
      method: "POST",
      secure: true,
      format: "json",
      ...params
    }),
    getSitePublishingPreviewById: (organizationId, siteId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/publishing/preview`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getSiteCustomizationById: (organizationId, siteId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/customization`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    updateSiteCustomizationById: (organizationId, siteId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/customization`,
      method: "PUT",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    listSiteIntegrationScripts: (organizationId, siteId, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/integration-scripts`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    listSiteIntegrations: (organizationId, siteId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/integrations`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    addSpaceToSite: (organizationId, siteId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/site-spaces`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    listSiteSpaces: (organizationId, siteId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/site-spaces`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    listSiteSectionGroups: (organizationId, siteId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/section-groups`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    addSectionGroupToSite: (organizationId, siteId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/section-groups`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    updateSiteSectionGroupById: (organizationId, siteId, siteSectionGroupId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/section-groups/${siteSectionGroupId}`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    deleteSiteSectionGroupById: (organizationId, siteId, siteSectionGroupId, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/section-groups/${siteSectionGroupId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    addSectionToGroup: (organizationId, siteId, siteSectionGroupId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/section-groups/${siteSectionGroupId}/sections`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    removeSectionFromGroup: (organizationId, siteId, siteSectionGroupId, siteSectionId, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/section-groups/${siteSectionGroupId}/sections/${siteSectionId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    addSectionToSite: (organizationId, siteId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/sections`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    listSiteSections: (organizationId, siteId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/sections`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    updateSiteSectionById: (organizationId, siteId, siteSectionId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/sections/${siteSectionId}`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    deleteSiteSectionById: (organizationId, siteId, siteSectionId, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/sections/${siteSectionId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    searchSiteContent: (organizationId, siteId, data, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/search`,
      method: "POST",
      query,
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    streamAskInSite: (organizationId, siteId, data, query, params = {}) => this.streamRequest({
      path: `/orgs/${organizationId}/sites/${siteId}/ask`,
      method: "POST",
      query,
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      ...params
    }),
    streamRecommendedQuestionsInSite: (organizationId, siteId, params = {}) => this.streamRequest({
      path: `/orgs/${organizationId}/sites/${siteId}/ask/questions`,
      method: "GET",
      secure: true,
      ...params
    }),
    updateSiteSpaceById: (organizationId, siteId, siteSpaceId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/site-spaces/${siteSpaceId}`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    deleteSiteSpaceById: (organizationId, siteId, siteSpaceId, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/site-spaces/${siteSpaceId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    getSiteSpaceCustomizationById: (organizationId, siteId, siteSpaceId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/site-spaces/${siteSpaceId}/customization`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    overrideSiteSpaceCustomizationById: (organizationId, siteId, siteSpaceId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/site-spaces/${siteSpaceId}/customization`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    deleteSiteSpaceCustomizationById: (organizationId, siteId, siteSpaceId, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/site-spaces/${siteSpaceId}/customization`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    moveSiteSectionGroup: (organizationId, siteId, siteSectionGroupId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/section-groups/${siteSectionGroupId}/move`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    moveSiteSection: (organizationId, siteId, siteSectionId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/sections/${siteSectionId}/move`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    moveSiteSpace: (organizationId, siteId, siteSpaceId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/site-spaces/${siteSpaceId}/move`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    listPermissionsAggregateInSite: (organizationId, siteId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/permissions/aggregate`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    streamAiResponseInSite: (organizationId, siteId, data, params = {}) => this.streamRequest({
      path: `/orgs/${organizationId}/sites/${siteId}/ai/response`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      ...params
    }),
    streamExistingAiResponseInSite: (organizationId, siteId, responseId, params = {}) => this.streamRequest({
      path: `/orgs/${organizationId}/sites/${siteId}/ai/response/${responseId}`,
      method: "GET",
      secure: true,
      ...params
    }),
    trackEventsInSiteById: (organizationId, siteId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/insights/events`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      ...params
    }),
    aggregateSiteEvents: (organizationId, siteId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/insights/events/aggregate`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    listSiteVisitorSegments: (organizationId, siteId, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/insights/visitor-segments`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    updateSiteAdsById: (organizationId, siteId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/ads`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      ...params
    }),
    createSiteRedirect: (organizationId, siteId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/redirects`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    listSiteRedirects: (organizationId, siteId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/redirects`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    updateSiteRedirectById: (organizationId, siteId, siteRedirectId, data, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/redirects/${siteRedirectId}`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    }),
    deleteSiteRedirectById: (organizationId, siteId, siteRedirectId, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/redirects/${siteRedirectId}`,
      method: "DELETE",
      secure: true,
      ...params
    }),
    getSiteRedirectBySource: (organizationId, siteId, query, params = {}) => this.request({
      path: `/orgs/${organizationId}/sites/${siteId}/redirect`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    })
  };
  subdomains = {
    getSubdomain: (subdomain, params = {}) => this.request({
      path: `/subdomains/${subdomain}`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    })
  };
  customHostnames = {
    getCustomHostname: (hostname, params = {}) => this.request({
      path: `/custom-hostnames/${hostname}`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    }),
    dnsRevalidateCustomHostname: (hostname, params = {}) => this.request({
      path: `/custom-hostnames/${hostname}`,
      method: "PATCH",
      secure: true,
      ...params
    }),
    removeCustomHostname: (hostname, params = {}) => this.request({
      path: `/custom-hostnames/${hostname}`,
      method: "DELETE",
      secure: true,
      ...params
    })
  };
  emailDomains = {
    getOrganizationsForEmailDomain: (emailDomain, params = {}) => this.request({
      path: `/email-domains/${emailDomain}/orgs`,
      method: "GET",
      secure: true,
      format: "json",
      ...params
    })
  };
  ads = {
    adsListSites: (query, params = {}) => this.request({
      path: `/ads/sites`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    adsUpdateSite: (siteId, data, params = {}) => this.request({
      path: `/ads/sites/${siteId}`,
      method: "PATCH",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      ...params
    })
  };
  urls = {
    getContentByUrl: (query, params = {}) => this.request({
      path: `/urls/content`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getEmbedByUrl: (query, params = {}) => this.request({
      path: `/urls/embed`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    getPublishedContentByUrl: (query, params = {}) => this.request({
      path: `/urls/published`,
      method: "GET",
      query,
      secure: true,
      format: "json",
      ...params
    }),
    resolvePublishedContentByUrl: (data, params = {}) => this.request({
      path: `/urls/published`,
      method: "POST",
      body: data,
      secure: true,
      type: "application/json" /* Json */,
      format: "json",
      ...params
    })
  };
};

// src/GitBookAPIError.ts
var GitBookAPIError = class extends Error {
  response;
  name = "GitBookAPIError";
  code;
  errorMessage;
  constructor(errorMessage, response) {
    const message = `GitBook API failed with [${response.status}] ${response.url}: ${errorMessage}`;
    super(message);
    this.response = response;
    this.code = response.status;
    this.errorMessage = errorMessage;
  }
};

// src/index.ts
var GITBOOK_DEFAULT_ENDPOINT = "https://api.gitbook.com";
var GitBookAPI = class extends Api {
  endpoint;
  authToken;
  userAgent;
  serviceBinding;
  constructor(options = {}) {
    const {
      endpoint = GITBOOK_DEFAULT_ENDPOINT,
      authToken,
      userAgent = `${name}/${version}`,
      serviceBinding
    } = options;
    const normalizedEndpoint = endpoint.endsWith("/") ? endpoint.slice(0, -1) : endpoint;
    super({
      baseUrl: `${normalizedEndpoint}/v1`,
      securityWorker: (securityData) => {
        if (securityData && securityData.authToken) {
          return {
            headers: {
              Authorization: `Bearer ${securityData.authToken}`,
              "User-Agent": userAgent
            }
          };
        }
        return {};
      },
      customFetch: async (input, init) => {
        if (init && "credentials" in init) {
          delete init.credentials;
        }
        if (init && "referrerPolicy" in init) {
          delete init.referrerPolicy;
        }
        const response = await (this.serviceBinding ? this.serviceBinding.fetch(input, init) : fetch(input, init));
        if (!response.ok) {
          let error = response.statusText;
          try {
            const body = await response.json();
            error = body?.error?.message || error;
          } catch (err) {
          }
          throw new GitBookAPIError(error, response);
        }
        return response;
      }
    });
    this.endpoint = normalizedEndpoint;
    this.userAgent = userAgent;
    this.authToken = authToken;
    this.serviceBinding = serviceBinding;
    this.setSecurityData({ authToken });
  }
  async createInstallationClient(integrationName, installationId) {
    const { data: installationToken } = await this.integrations.createIntegrationInstallationToken(
      integrationName,
      installationId
    );
    return new GitBookAPI({
      endpoint: this.endpoint,
      userAgent: this.userAgent,
      authToken: installationToken.token,
      serviceBinding: this.serviceBinding
    });
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AIMessageRole,
  AIModel,
  APIIntegrationScope,
  AgentStatus,
  AgentTaskStatus,
  Api,
  BillingInterval,
  BillingProduct,
  BillingSwitchAction,
  BillingTrialStatus,
  ChangeRequestReviewStatus,
  ChangeRequestStatus,
  CloudflareHostnameStatus,
  CloudflareHostnameTLSStatus,
  CloudflareHostnameTLSValidationMethod,
  ContentKitIcon,
  ContentReferenceRelation,
  ContentReferenceStatus,
  ContentType,
  ContentVisibility,
  CustomHostnameDnsStatus,
  CustomHostnameErrorStatus,
  CustomHostnameSslStatus,
  CustomizationBackground,
  CustomizationCorners,
  CustomizationDefaultFont,
  CustomizationDepth,
  CustomizationHeaderPreset,
  CustomizationIconsStyle,
  CustomizationLinksStyle,
  CustomizationLocale,
  CustomizationSearchStyle,
  CustomizationSidebarBackgroundStyle,
  CustomizationSidebarListStyle,
  CustomizationTheme,
  CustomizationThemeMode,
  GITBOOK_DEFAULT_ENDPOINT,
  GitBookAPI,
  GitBookAPIError,
  GitBookUsers,
  GitSyncOperationDirection,
  GitSyncOperationStage,
  GitSyncOperationState,
  GitSyncProvider,
  HttpClient,
  ImportContentSource,
  IntegrationCategory,
  IntegrationInstallationSiteSelection,
  IntegrationInstallationSpaceSelection,
  IntegrationInstallationStatus,
  IntegrationScope,
  IntegrationTarget,
  IntegrationVisibility,
  MemberRole,
  OpenAPISpecProcessingErrorCode,
  OpenAPISpecProcessingState,
  OrganizationBlockReason,
  OrganizationCommunityType,
  OrganizationType,
  OrganizationUseCase,
  PageFeedbackRating,
  RevisionPageLayoutOptionsCoverSize,
  RevisionPageLayoutPreset,
  RevisionPageType,
  RevisionSemanticChangeType,
  SAMLProviderStatus,
  SiteAdsStatus,
  SiteAdsTopic,
  SiteAgentsContext,
  SiteCustomizationFeature,
  SiteExternalLinksTarget,
  SiteFeatureKey,
  SiteInsightsAdPlacement,
  SiteInsightsEventType,
  SiteInsightsLinkPosition,
  SiteInsightsQueryOperator,
  SiteInsightsQueryRange,
  SiteInsightsTrademarkPlacement,
  SiteInsightsVisitorBot,
  SiteInsightsVisitorBrowser,
  SiteInsightsVisitorDevice,
  SiteInsightsVisitorOS,
  SiteType,
  SiteVisibility,
  SpaceEditMode,
  StorageUploadKind,
  TeamMemberRole,
  TextAlignment,
  TranslationLanguage
});
